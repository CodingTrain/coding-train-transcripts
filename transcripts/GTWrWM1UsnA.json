{
  "id": "rao5o2rbl4urlen25sz2mdeim4",
  "version": "91ee9c0c3df30478510ff8c8a3a545add1ad0259ad3a9f78fba57fbc05ee64f7",
  "input": {
    "audio": "https://upcdn.io/FW25b4F/raw/coding-train/GTWrWM1UsnA.m4a"
  },
  "logs": "Transcribe with large-v2 model\nDetected language: English\n  0%|          | 0/144072 [00:00<?, ?frames/s]\n  2%|▏         | 2400/144072 [00:06<05:54, 399.12frames/s]\n  4%|▎         | 5336/144072 [00:14<06:27, 357.66frames/s]\n  5%|▌         | 7428/144072 [00:21<06:41, 340.74frames/s]\n  7%|▋         | 10180/144072 [00:29<06:26, 346.21frames/s]\n  9%|▉         | 12788/144072 [00:35<05:54, 370.82frames/s]\n 11%|█         | 15448/144072 [00:42<05:47, 369.71frames/s]\n 13%|█▎        | 18376/144072 [00:47<05:00, 417.90frames/s]\n 15%|█▍        | 21040/144072 [00:54<05:02, 407.39frames/s]\n 16%|█▋        | 23544/144072 [01:01<05:01, 400.04frames/s]\n 18%|█▊        | 26136/144072 [01:04<04:07, 476.57frames/s]\n 20%|██        | 28836/144072 [01:09<03:55, 488.90frames/s]\n 22%|██▏       | 31356/144072 [01:13<03:37, 518.40frames/s]\n 24%|██▎       | 34032/144072 [01:19<03:38, 502.79frames/s]\n 26%|██▌       | 36820/144072 [01:25<03:41, 485.13frames/s]\n 28%|██▊       | 39620/144072 [01:31<03:39, 475.17frames/s]\n 29%|██▉       | 41920/144072 [01:37<03:46, 451.47frames/s]\n 30%|███       | 43620/144072 [01:41<03:48, 439.74frames/s]\n 31%|███▏      | 45320/144072 [01:44<03:25, 481.08frames/s]\n 33%|███▎      | 47620/144072 [01:47<03:02, 527.19frames/s]\n 35%|███▍      | 49720/144072 [01:52<03:15, 481.65frames/s]\n 36%|███▌      | 52120/144072 [01:59<03:27, 442.45frames/s]\n 38%|███▊      | 54720/144072 [02:02<02:55, 509.15frames/s]\n 39%|███▉      | 56020/144072 [02:06<03:02, 481.38frames/s]\n 41%|████      | 58620/144072 [02:09<02:37, 543.94frames/s]\n 42%|████▏     | 60720/144072 [02:13<02:33, 544.29frames/s]\n 44%|████▎     | 62820/144072 [02:18<02:42, 499.10frames/s]\n 45%|████▌     | 65120/144072 [02:22<02:31, 520.51frames/s]\n 47%|████▋     | 67320/144072 [02:27<02:38, 484.64frames/s]\n 48%|████▊     | 69820/144072 [02:34<02:43, 453.05frames/s]\n 50%|█████     | 72220/144072 [02:38<02:31, 473.24frames/s]\n 52%|█████▏    | 74220/144072 [02:42<02:26, 476.52frames/s]\n 53%|█████▎    | 76420/144072 [02:46<02:16, 495.82frames/s]\n 55%|█████▍    | 78520/144072 [02:51<02:18, 472.52frames/s]\n 56%|█████▋    | 81120/144072 [02:56<02:03, 508.52frames/s]\n 57%|█████▋    | 82720/144072 [03:00<02:12, 461.61frames/s]\n 57%|█████▋    | 82720/144072 [03:12<02:12, 461.61frames/s]\n 58%|█████▊    | 83920/144072 [03:30<06:34, 152.43frames/s]\n 59%|█████▉    | 85420/144072 [03:33<05:17, 184.91frames/s]\n 61%|██████    | 87420/144072 [03:36<03:51, 244.86frames/s]\n 61%|██████▏   | 88520/144072 [03:39<03:29, 264.73frames/s]\n 63%|██████▎   | 90520/144072 [03:42<02:46, 321.19frames/s]\n 65%|██████▍   | 93120/144072 [03:46<02:06, 401.76frames/s]\n 66%|██████▌   | 94820/144072 [03:50<01:57, 419.49frames/s]\n 67%|██████▋   | 95820/144072 [03:52<01:57, 410.99frames/s]\n 68%|██████▊   | 98220/144072 [03:56<01:31, 499.41frames/s]\n 70%|██████▉   | 100220/144072 [03:59<01:22, 532.24frames/s]\n 71%|███████   | 101820/144072 [04:03<01:27, 481.96frames/s]\n 72%|███████▏  | 104220/144072 [04:06<01:13, 545.58frames/s]\n 74%|███████▎  | 105920/144072 [04:10<01:10, 541.22frames/s]\n 75%|███████▍  | 107820/144072 [04:12<01:00, 594.31frames/s]\n 76%|███████▌  | 109520/144072 [04:14<00:53, 644.86frames/s]\n 77%|███████▋  | 111020/144072 [04:16<00:49, 666.10frames/s]\n 78%|███████▊  | 112020/144072 [04:18<00:51, 616.87frames/s]\n 79%|███████▉  | 113920/144072 [04:21<00:47, 628.56frames/s]\n 81%|████████  | 116120/144072 [04:25<00:43, 640.77frames/s]\n 82%|████████▏ | 117720/144072 [04:29<00:49, 535.71frames/s]\n 83%|████████▎ | 119820/144072 [04:32<00:41, 588.58frames/s]\n 85%|████████▍ | 122220/144072 [04:35<00:34, 636.18frames/s]\n 86%|████████▌ | 123720/144072 [04:39<00:37, 541.31frames/s]\n 87%|████████▋ | 126020/144072 [04:43<00:32, 554.24frames/s]\n 88%|████████▊ | 126920/144072 [04:46<00:34, 502.33frames/s]\n 89%|████████▉ | 128820/144072 [04:48<00:27, 563.93frames/s]\n 91%|█████████ | 130620/144072 [04:53<00:26, 502.73frames/s]\n 93%|█████████▎| 133320/144072 [04:58<00:21, 500.83frames/s]\n 94%|█████████▍| 135820/144072 [05:02<00:15, 544.24frames/s]\n 96%|█████████▌| 138520/144072 [05:08<00:11, 500.65frames/s]\n 97%|█████████▋| 140420/144072 [05:14<00:08, 435.46frames/s]\n100%|█████████▉| 143420/144072 [05:20<00:01, 450.16frames/s]\n100%|██████████| 144072/144072 [05:21<00:00, 475.77frames/s]\n100%|██████████| 144072/144072 [05:21<00:00, 448.12frames/s]\n",
  "output": {
    "detected_language": "english",
    "segments": [
      {
        "avg_logprob": -0.2893262678577054,
        "compression_ratio": 1.6896551724137931,
        "end": 5.84,
        "id": 0,
        "no_speech_prob": 0.009857308119535446,
        "seek": 0,
        "start": 0,
        "temperature": 0,
        "text": " Hello and welcome to a coding challenge tic-tac-toe. I'm gonna make tic-tac-toe.",
        "tokens": [
          50364,
          2425,
          293,
          2928,
          281,
          257,
          17720,
          3430,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          13,
          286,
          478,
          799,
          652,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          13,
          50656
        ]
      },
      {
        "avg_logprob": -0.2893262678577054,
        "compression_ratio": 1.6896551724137931,
        "end": 9.4,
        "id": 1,
        "no_speech_prob": 0.009857308119535446,
        "seek": 0,
        "start": 5.84,
        "temperature": 0,
        "text": " I'm hoping when you look at how long this video is it's very short because I",
        "tokens": [
          50656,
          286,
          478,
          7159,
          562,
          291,
          574,
          412,
          577,
          938,
          341,
          960,
          307,
          309,
          311,
          588,
          2099,
          570,
          286,
          50834
        ]
      },
      {
        "avg_logprob": -0.2893262678577054,
        "compression_ratio": 1.6896551724137931,
        "end": 12.72,
        "id": 2,
        "no_speech_prob": 0.009857308119535446,
        "seek": 0,
        "start": 9.4,
        "temperature": 0,
        "text": " don't have a lot of time right now. So I'm gonna try to make a very",
        "tokens": [
          50834,
          500,
          380,
          362,
          257,
          688,
          295,
          565,
          558,
          586,
          13,
          407,
          286,
          478,
          799,
          853,
          281,
          652,
          257,
          588,
          51000
        ]
      },
      {
        "avg_logprob": -0.2893262678577054,
        "compression_ratio": 1.6896551724137931,
        "end": 17.240000000000002,
        "id": 3,
        "no_speech_prob": 0.009857308119535446,
        "seek": 0,
        "start": 12.72,
        "temperature": 0,
        "text": " beginner-friendly example of the game tic-tac-toe without any bells and",
        "tokens": [
          51000,
          22080,
          12,
          22864,
          1365,
          295,
          264,
          1216,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          1553,
          604,
          25474,
          293,
          51226
        ]
      },
      {
        "avg_logprob": -0.2893262678577054,
        "compression_ratio": 1.6896551724137931,
        "end": 21.36,
        "id": 4,
        "no_speech_prob": 0.009857308119535446,
        "seek": 0,
        "start": 17.240000000000002,
        "temperature": 0,
        "text": " whistles, without a lot of fancy code. I'm not gonna over-engineer it. I will come",
        "tokens": [
          51226,
          49282,
          11,
          1553,
          257,
          688,
          295,
          10247,
          3089,
          13,
          286,
          478,
          406,
          799,
          670,
          12,
          25609,
          260,
          309,
          13,
          286,
          486,
          808,
          51432
        ]
      },
      {
        "avg_logprob": -0.2893262678577054,
        "compression_ratio": 1.6896551724137931,
        "end": 24,
        "id": 5,
        "no_speech_prob": 0.009857308119535446,
        "seek": 0,
        "start": 21.36,
        "temperature": 0,
        "text": " back and...",
        "tokens": [
          51432,
          646,
          293,
          485,
          51564
        ]
      },
      {
        "avg_logprob": -0.2380780064782431,
        "compression_ratio": 1.5847750865051904,
        "end": 30.2,
        "id": 6,
        "no_speech_prob": 0.000579208426643163,
        "seek": 2400,
        "start": 24,
        "temperature": 0,
        "text": " I will refactor it later because the reason why I'm making this is I",
        "tokens": [
          50364,
          286,
          486,
          1895,
          15104,
          309,
          1780,
          570,
          264,
          1778,
          983,
          286,
          478,
          1455,
          341,
          307,
          286,
          50674
        ]
      },
      {
        "avg_logprob": -0.2380780064782431,
        "compression_ratio": 1.5847750865051904,
        "end": 35.08,
        "id": 7,
        "no_speech_prob": 0.000579208426643163,
        "seek": 2400,
        "start": 30.2,
        "temperature": 0,
        "text": " eventually want to show you some different algorithms for an AI or at",
        "tokens": [
          50674,
          4728,
          528,
          281,
          855,
          291,
          512,
          819,
          14642,
          337,
          364,
          7318,
          420,
          412,
          50918
        ]
      },
      {
        "avg_logprob": -0.2380780064782431,
        "compression_ratio": 1.5847750865051904,
        "end": 38.480000000000004,
        "id": 8,
        "no_speech_prob": 0.000579208426643163,
        "seek": 2400,
        "start": 35.08,
        "temperature": 0,
        "text": " least a bot to play the game tic-tac-toe. But that's not happening in this video.",
        "tokens": [
          50918,
          1935,
          257,
          10592,
          281,
          862,
          264,
          1216,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          13,
          583,
          300,
          311,
          406,
          2737,
          294,
          341,
          960,
          13,
          51088
        ]
      },
      {
        "avg_logprob": -0.2380780064782431,
        "compression_ratio": 1.5847750865051904,
        "end": 43.519999999999996,
        "id": 9,
        "no_speech_prob": 0.000579208426643163,
        "seek": 2400,
        "start": 38.480000000000004,
        "temperature": 0,
        "text": " I'm gonna make the most basic, simple, friendly version of tic-tac-toe right",
        "tokens": [
          51088,
          286,
          478,
          799,
          652,
          264,
          881,
          3875,
          11,
          2199,
          11,
          9208,
          3037,
          295,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          558,
          51340
        ]
      },
      {
        "avg_logprob": -0.2380780064782431,
        "compression_ratio": 1.5847750865051904,
        "end": 49,
        "id": 10,
        "no_speech_prob": 0.000579208426643163,
        "seek": 2400,
        "start": 43.519999999999996,
        "temperature": 0,
        "text": " here using JavaScript, the p5.js library, and the p5 web editor. Follow along if",
        "tokens": [
          51340,
          510,
          1228,
          15778,
          11,
          264,
          280,
          20,
          13,
          25530,
          6405,
          11,
          293,
          264,
          280,
          20,
          3670,
          9839,
          13,
          9876,
          2051,
          498,
          51614
        ]
      },
      {
        "avg_logprob": -0.2380780064782431,
        "compression_ratio": 1.5847750865051904,
        "end": 53.36,
        "id": 11,
        "no_speech_prob": 0.000579208426643163,
        "seek": 2400,
        "start": 49,
        "temperature": 0,
        "text": " you wish and see what happens. I have not practiced or planned for this at all.",
        "tokens": [
          51614,
          291,
          3172,
          293,
          536,
          437,
          2314,
          13,
          286,
          362,
          406,
          19268,
          420,
          8589,
          337,
          341,
          412,
          439,
          13,
          51832
        ]
      },
      {
        "avg_logprob": -0.2881182098388672,
        "compression_ratio": 1.6842105263157894,
        "end": 58.88,
        "id": 12,
        "no_speech_prob": 0.0006263251416385174,
        "seek": 5336,
        "start": 54.32,
        "temperature": 0,
        "text": " Alright, I need a board. So I definitely need a board. I'm gonna say let board and",
        "tokens": [
          50412,
          2798,
          11,
          286,
          643,
          257,
          3150,
          13,
          407,
          286,
          2138,
          643,
          257,
          3150,
          13,
          286,
          478,
          799,
          584,
          718,
          3150,
          293,
          50640
        ]
      },
      {
        "avg_logprob": -0.2881182098388672,
        "compression_ratio": 1.6842105263157894,
        "end": 64.24,
        "id": 13,
        "no_speech_prob": 0.0006263251416385174,
        "seek": 5336,
        "start": 58.88,
        "temperature": 0,
        "text": " I'm gonna just... it's gonna be an array and maybe it'll be an array of arrays.",
        "tokens": [
          50640,
          286,
          478,
          799,
          445,
          485,
          309,
          311,
          799,
          312,
          364,
          10225,
          293,
          1310,
          309,
          603,
          312,
          364,
          10225,
          295,
          41011,
          13,
          50908
        ]
      },
      {
        "avg_logprob": -0.2881182098388672,
        "compression_ratio": 1.6842105263157894,
        "end": 67.64,
        "id": 14,
        "no_speech_prob": 0.0006263251416385174,
        "seek": 5336,
        "start": 64.24,
        "temperature": 0,
        "text": " And let's use strings. It's probably a terrible idea. So this will be the top",
        "tokens": [
          50908,
          400,
          718,
          311,
          764,
          13985,
          13,
          467,
          311,
          1391,
          257,
          6237,
          1558,
          13,
          407,
          341,
          486,
          312,
          264,
          1192,
          51078
        ]
      },
      {
        "avg_logprob": -0.2881182098388672,
        "compression_ratio": 1.6842105263157894,
        "end": 74.28,
        "id": 15,
        "no_speech_prob": 0.0006263251416385174,
        "seek": 5336,
        "start": 67.64,
        "temperature": 0,
        "text": " row. This will be the middle row. Right? Tic-tac-toe is 3 by 3 by 3. And then I",
        "tokens": [
          51078,
          5386,
          13,
          639,
          486,
          312,
          264,
          2808,
          5386,
          13,
          1779,
          30,
          314,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          307,
          805,
          538,
          805,
          538,
          805,
          13,
          400,
          550,
          286,
          51410
        ]
      },
      {
        "avg_logprob": -0.22459987031311548,
        "compression_ratio": 1.6923076923076923,
        "end": 84.4,
        "id": 16,
        "no_speech_prob": 0.45317694544792175,
        "seek": 7428,
        "start": 74.28,
        "temperature": 0,
        "text": " need two players. So player 1 is an X and player 2 is an O. So now I need to",
        "tokens": [
          50364,
          643,
          732,
          4150,
          13,
          407,
          4256,
          502,
          307,
          364,
          1783,
          293,
          4256,
          568,
          307,
          364,
          422,
          13,
          407,
          586,
          286,
          643,
          281,
          50870
        ]
      },
      {
        "avg_logprob": -0.22459987031311548,
        "compression_ratio": 1.6923076923076923,
        "end": 88.16,
        "id": 17,
        "no_speech_prob": 0.45317694544792175,
        "seek": 7428,
        "start": 84.4,
        "temperature": 0,
        "text": " render the board. Let's put some like stuff in it. Let's just pretend it has",
        "tokens": [
          50870,
          15529,
          264,
          3150,
          13,
          961,
          311,
          829,
          512,
          411,
          1507,
          294,
          309,
          13,
          961,
          311,
          445,
          11865,
          309,
          575,
          51058
        ]
      },
      {
        "avg_logprob": -0.22459987031311548,
        "compression_ratio": 1.6923076923076923,
        "end": 91.16,
        "id": 18,
        "no_speech_prob": 0.45317694544792175,
        "seek": 7428,
        "start": 88.16,
        "temperature": 0,
        "text": " some stuff. So I want to render the board. I mean I could use this with DOM. There's",
        "tokens": [
          51058,
          512,
          1507,
          13,
          407,
          286,
          528,
          281,
          15529,
          264,
          3150,
          13,
          286,
          914,
          286,
          727,
          764,
          341,
          365,
          35727,
          13,
          821,
          311,
          51208
        ]
      },
      {
        "avg_logprob": -0.22459987031311548,
        "compression_ratio": 1.6923076923076923,
        "end": 95.08,
        "id": 19,
        "no_speech_prob": 0.45317694544792175,
        "seek": 7428,
        "start": 91.16,
        "temperature": 0,
        "text": " so many ways I could do this. I'm just gonna do this with canvas and in the",
        "tokens": [
          51208,
          370,
          867,
          2098,
          286,
          727,
          360,
          341,
          13,
          286,
          478,
          445,
          799,
          360,
          341,
          365,
          16267,
          293,
          294,
          264,
          51404
        ]
      },
      {
        "avg_logprob": -0.22459987031311548,
        "compression_ratio": 1.6923076923076923,
        "end": 101.8,
        "id": 20,
        "no_speech_prob": 0.45317694544792175,
        "seek": 7428,
        "start": 95.08,
        "temperature": 0,
        "text": " draw loop. So I'm gonna say for let i equal 0, i is less than 3, i plus plus. For",
        "tokens": [
          51404,
          2642,
          6367,
          13,
          407,
          286,
          478,
          799,
          584,
          337,
          718,
          741,
          2681,
          1958,
          11,
          741,
          307,
          1570,
          813,
          805,
          11,
          741,
          1804,
          1804,
          13,
          1171,
          51740
        ]
      },
      {
        "avg_logprob": -0.24594476720788977,
        "compression_ratio": 1.5070422535211268,
        "end": 109.12,
        "id": 21,
        "no_speech_prob": 0.006589728407561779,
        "seek": 10180,
        "start": 101.8,
        "temperature": 0,
        "text": " let j equal 0, j is less than 3, j plus plus. So this is pretty tricky. If you're",
        "tokens": [
          50364,
          718,
          361,
          2681,
          1958,
          11,
          361,
          307,
          1570,
          813,
          805,
          11,
          361,
          1804,
          1804,
          13,
          407,
          341,
          307,
          1238,
          12414,
          13,
          759,
          291,
          434,
          50730
        ]
      },
      {
        "avg_logprob": -0.24594476720788977,
        "compression_ratio": 1.5070422535211268,
        "end": 114.28,
        "id": 22,
        "no_speech_prob": 0.006589728407561779,
        "seek": 10180,
        "start": 109.12,
        "temperature": 0,
        "text": " a beginner programmer, this is a nested loop. And I've actually made this a grid.",
        "tokens": [
          50730,
          257,
          22080,
          32116,
          11,
          341,
          307,
          257,
          15646,
          292,
          6367,
          13,
          400,
          286,
          600,
          767,
          1027,
          341,
          257,
          10748,
          13,
          50988
        ]
      },
      {
        "avg_logprob": -0.24594476720788977,
        "compression_ratio": 1.5070422535211268,
        "end": 121.56,
        "id": 23,
        "no_speech_prob": 0.006589728407561779,
        "seek": 10180,
        "start": 114.28,
        "temperature": 0,
        "text": " So every spot in this grid... and let me actually fill it out. Just so we see",
        "tokens": [
          50988,
          407,
          633,
          4008,
          294,
          341,
          10748,
          485,
          293,
          718,
          385,
          767,
          2836,
          309,
          484,
          13,
          1449,
          370,
          321,
          536,
          51352
        ]
      },
      {
        "avg_logprob": -0.24594476720788977,
        "compression_ratio": 1.5070422535211268,
        "end": 127.88,
        "id": 24,
        "no_speech_prob": 0.006589728407561779,
        "seek": 10180,
        "start": 121.56,
        "temperature": 0,
        "text": " something here. I'm gonna pretend this has just been played. Right? So the idea",
        "tokens": [
          51352,
          746,
          510,
          13,
          286,
          478,
          799,
          11865,
          341,
          575,
          445,
          668,
          3737,
          13,
          1779,
          30,
          407,
          264,
          1558,
          51668
        ]
      },
      {
        "avg_logprob": -0.2440452040912949,
        "compression_ratio": 1.5856573705179282,
        "end": 133.76,
        "id": 25,
        "no_speech_prob": 0.0685352236032486,
        "seek": 12788,
        "start": 127.88,
        "temperature": 0,
        "text": " is that this two-dimensional array structure, this list of lists, is storing",
        "tokens": [
          50364,
          307,
          300,
          341,
          732,
          12,
          18759,
          10225,
          3877,
          11,
          341,
          1329,
          295,
          14511,
          11,
          307,
          26085,
          50658
        ]
      },
      {
        "avg_logprob": -0.2440452040912949,
        "compression_ratio": 1.5856573705179282,
        "end": 138.68,
        "id": 26,
        "no_speech_prob": 0.0685352236032486,
        "seek": 12788,
        "start": 133.76,
        "temperature": 0,
        "text": " all the information for what the current state of each cell in the tic-tac-toe",
        "tokens": [
          50658,
          439,
          264,
          1589,
          337,
          437,
          264,
          2190,
          1785,
          295,
          1184,
          2815,
          294,
          264,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          50904
        ]
      },
      {
        "avg_logprob": -0.2440452040912949,
        "compression_ratio": 1.5856573705179282,
        "end": 142.96,
        "id": 27,
        "no_speech_prob": 0.0685352236032486,
        "seek": 12788,
        "start": 138.68,
        "temperature": 0,
        "text": " grid is. At the beginning they're all blank and then as the players play, X's",
        "tokens": [
          50904,
          10748,
          307,
          13,
          1711,
          264,
          2863,
          436,
          434,
          439,
          8247,
          293,
          550,
          382,
          264,
          4150,
          862,
          11,
          1783,
          311,
          51118
        ]
      },
      {
        "avg_logprob": -0.2440452040912949,
        "compression_ratio": 1.5856573705179282,
        "end": 148.04,
        "id": 28,
        "no_speech_prob": 0.0685352236032486,
        "seek": 12788,
        "start": 142.96,
        "temperature": 0,
        "text": " and O's get filled in. So now I'm gonna nested loop through check every column,",
        "tokens": [
          51118,
          293,
          422,
          311,
          483,
          6412,
          294,
          13,
          407,
          586,
          286,
          478,
          799,
          15646,
          292,
          6367,
          807,
          1520,
          633,
          7738,
          11,
          51372
        ]
      },
      {
        "avg_logprob": -0.2440452040912949,
        "compression_ratio": 1.5856573705179282,
        "end": 154.48,
        "id": 29,
        "no_speech_prob": 0.0685352236032486,
        "seek": 12788,
        "start": 148.04,
        "temperature": 0,
        "text": " check every row, and render something. So I could just use the text function. Right?",
        "tokens": [
          51372,
          1520,
          633,
          5386,
          11,
          293,
          15529,
          746,
          13,
          407,
          286,
          727,
          445,
          764,
          264,
          2487,
          2445,
          13,
          1779,
          30,
          51694
        ]
      },
      {
        "avg_logprob": -0.31968174623639395,
        "compression_ratio": 1.7595628415300546,
        "end": 162.32,
        "id": 30,
        "no_speech_prob": 0.003945362288504839,
        "seek": 15448,
        "start": 154.48,
        "temperature": 0,
        "text": " I could say let spot equal the board index i index j. And then I could say text",
        "tokens": [
          50364,
          286,
          727,
          584,
          718,
          4008,
          2681,
          264,
          3150,
          8186,
          741,
          8186,
          361,
          13,
          400,
          550,
          286,
          727,
          584,
          2487,
          50756
        ]
      },
      {
        "avg_logprob": -0.31968174623639395,
        "compression_ratio": 1.7595628415300546,
        "end": 172.44,
        "id": 31,
        "no_speech_prob": 0.003945362288504839,
        "seek": 15448,
        "start": 162.32,
        "temperature": 0,
        "text": " that spot at x comma y. So where is x and y? So I need a width. Like I need... I'm",
        "tokens": [
          50756,
          300,
          4008,
          412,
          2031,
          22117,
          288,
          13,
          407,
          689,
          307,
          2031,
          293,
          288,
          30,
          407,
          286,
          643,
          257,
          11402,
          13,
          1743,
          286,
          643,
          485,
          286,
          478,
          51262
        ]
      },
      {
        "avg_logprob": -0.31968174623639395,
        "compression_ratio": 1.7595628415300546,
        "end": 178.88,
        "id": 32,
        "no_speech_prob": 0.003945362288504839,
        "seek": 15448,
        "start": 172.44,
        "temperature": 0,
        "text": " gonna fill the whole canvas. So width equals the width of the canvas divided",
        "tokens": [
          51262,
          799,
          2836,
          264,
          1379,
          16267,
          13,
          407,
          11402,
          6915,
          264,
          11402,
          295,
          264,
          16267,
          6666,
          51584
        ]
      },
      {
        "avg_logprob": -0.31968174623639395,
        "compression_ratio": 1.7595628415300546,
        "end": 183.76,
        "id": 33,
        "no_speech_prob": 0.003945362288504839,
        "seek": 15448,
        "start": 178.88,
        "temperature": 0,
        "text": " by 3. And height equals the height of the canvas divided by 3. It would make sense",
        "tokens": [
          51584,
          538,
          805,
          13,
          400,
          6681,
          6915,
          264,
          6681,
          295,
          264,
          16267,
          6666,
          538,
          805,
          13,
          467,
          576,
          652,
          2020,
          51828
        ]
      },
      {
        "avg_logprob": -0.3232972462972005,
        "compression_ratio": 1.5551181102362204,
        "end": 189.48,
        "id": 34,
        "no_speech_prob": 0.003593563800677657,
        "seek": 18376,
        "start": 183.76,
        "temperature": 0,
        "text": " for me to like have players in an array and maybe I could... I could have 3. It",
        "tokens": [
          50364,
          337,
          385,
          281,
          411,
          362,
          4150,
          294,
          364,
          10225,
          293,
          1310,
          286,
          727,
          485,
          286,
          727,
          362,
          805,
          13,
          467,
          50650
        ]
      },
      {
        "avg_logprob": -0.3232972462972005,
        "compression_ratio": 1.5551181102362204,
        "end": 192.39999999999998,
        "id": 35,
        "no_speech_prob": 0.003593563800677657,
        "seek": 18376,
        "start": 189.48,
        "temperature": 0,
        "text": " doesn't have to be a hard-coded number because I could make like a 5 by 5",
        "tokens": [
          50650,
          1177,
          380,
          362,
          281,
          312,
          257,
          1152,
          12,
          66,
          12340,
          1230,
          570,
          286,
          727,
          652,
          411,
          257,
          1025,
          538,
          1025,
          50796
        ]
      },
      {
        "avg_logprob": -0.3232972462972005,
        "compression_ratio": 1.5551181102362204,
        "end": 196.48,
        "id": 36,
        "no_speech_prob": 0.003593563800677657,
        "seek": 18376,
        "start": 192.39999999999998,
        "temperature": 0,
        "text": " tic-tac-toe board. But I mean I'm doing this in the simplest way possible. So x",
        "tokens": [
          50796,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          3150,
          13,
          583,
          286,
          914,
          286,
          478,
          884,
          341,
          294,
          264,
          22811,
          636,
          1944,
          13,
          407,
          2031,
          51000
        ]
      },
      {
        "avg_logprob": -0.3232972462972005,
        "compression_ratio": 1.5551181102362204,
        "end": 206.48,
        "id": 37,
        "no_speech_prob": 0.003593563800677657,
        "seek": 18376,
        "start": 196.48,
        "temperature": 0,
        "text": " equals width times i. And y equals height times i. And then... And let's run this.",
        "tokens": [
          51000,
          6915,
          11402,
          1413,
          741,
          13,
          400,
          288,
          6915,
          6681,
          1413,
          741,
          13,
          400,
          550,
          485,
          400,
          718,
          311,
          1190,
          341,
          13,
          51500
        ]
      },
      {
        "avg_logprob": -0.3232972462972005,
        "compression_ratio": 1.5551181102362204,
        "end": 210.39999999999998,
        "id": 38,
        "no_speech_prob": 0.003593563800677657,
        "seek": 18376,
        "start": 206.48,
        "temperature": 0,
        "text": " What's gonna happen? Do you see anything? Some X's and O's. They're sort of in",
        "tokens": [
          51500,
          708,
          311,
          799,
          1051,
          30,
          1144,
          291,
          536,
          1340,
          30,
          2188,
          1783,
          311,
          293,
          422,
          311,
          13,
          814,
          434,
          1333,
          295,
          294,
          51696
        ]
      },
      {
        "avg_logprob": -0.21024133608891413,
        "compression_ratio": 1.4577777777777778,
        "end": 219.24,
        "id": 39,
        "no_speech_prob": 0.09400893747806549,
        "seek": 21040,
        "start": 210.4,
        "temperature": 0,
        "text": " there. And then I'm going to say text size 32 to make it bigger. Why are they",
        "tokens": [
          50364,
          456,
          13,
          400,
          550,
          286,
          478,
          516,
          281,
          584,
          2487,
          2744,
          8858,
          281,
          652,
          309,
          3801,
          13,
          1545,
          366,
          436,
          50806
        ]
      },
      {
        "avg_logprob": -0.21024133608891413,
        "compression_ratio": 1.4577777777777778,
        "end": 224.76,
        "id": 40,
        "no_speech_prob": 0.09400893747806549,
        "seek": 21040,
        "start": 219.24,
        "temperature": 0,
        "text": " all on top of each other like that? Oh! Oh! I forgot j here. There we go. Look!",
        "tokens": [
          50806,
          439,
          322,
          1192,
          295,
          1184,
          661,
          411,
          300,
          30,
          876,
          0,
          876,
          0,
          286,
          5298,
          361,
          510,
          13,
          821,
          321,
          352,
          13,
          2053,
          0,
          51082
        ]
      },
      {
        "avg_logprob": -0.21024133608891413,
        "compression_ratio": 1.4577777777777778,
        "end": 230.04000000000002,
        "id": 41,
        "no_speech_prob": 0.09400893747806549,
        "seek": 21040,
        "start": 224.76,
        "temperature": 0,
        "text": " There's my tic-tac-toe board. But things are kind of like off. Oh! Because of the",
        "tokens": [
          51082,
          821,
          311,
          452,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          3150,
          13,
          583,
          721,
          366,
          733,
          295,
          411,
          766,
          13,
          876,
          0,
          1436,
          295,
          264,
          51346
        ]
      },
      {
        "avg_logprob": -0.21024133608891413,
        "compression_ratio": 1.4577777777777778,
        "end": 235.44,
        "id": 42,
        "no_speech_prob": 0.09400893747806549,
        "seek": 21040,
        "start": 230.04000000000002,
        "temperature": 0,
        "text": " way... You know what? I should just draw it as a circle. Let's just say if spot... Let's",
        "tokens": [
          51346,
          636,
          485,
          509,
          458,
          437,
          30,
          286,
          820,
          445,
          2642,
          309,
          382,
          257,
          6329,
          13,
          961,
          311,
          445,
          584,
          498,
          4008,
          485,
          961,
          311,
          51616
        ]
      },
      {
        "avg_logprob": -0.309722319893215,
        "compression_ratio": 1.3846153846153846,
        "end": 247.92,
        "id": 43,
        "no_speech_prob": 0.039638325572013855,
        "seek": 23544,
        "start": 235.44,
        "temperature": 0,
        "text": " do this. If spot equals player 1, right? Then draw an ellipse at x comma y width",
        "tokens": [
          50364,
          360,
          341,
          13,
          759,
          4008,
          6915,
          4256,
          502,
          11,
          558,
          30,
          1396,
          2642,
          364,
          8284,
          48041,
          412,
          2031,
          22117,
          288,
          11402,
          50988
        ]
      },
      {
        "avg_logprob": -0.309722319893215,
        "compression_ratio": 1.3846153846153846,
        "end": 261.36,
        "id": 44,
        "no_speech_prob": 0.039638325572013855,
        "seek": 23544,
        "start": 247.92,
        "temperature": 0,
        "text": " width, right? And then otherwise if spot equals player 2, then draw a line from x",
        "tokens": [
          50988,
          11402,
          11,
          558,
          30,
          400,
          550,
          5911,
          498,
          4008,
          6915,
          4256,
          568,
          11,
          550,
          2642,
          257,
          1622,
          490,
          2031,
          51660
        ]
      },
      {
        "avg_logprob": -0.2826909266020122,
        "compression_ratio": 1.5220125786163523,
        "end": 272.48,
        "id": 45,
        "no_speech_prob": 0.6441499590873718,
        "seek": 26136,
        "start": 261.36,
        "temperature": 0,
        "text": " y to x plus w x plus h. And another line from x plus w y to x y plus h. So that's",
        "tokens": [
          50364,
          288,
          281,
          2031,
          1804,
          261,
          2031,
          1804,
          276,
          13,
          400,
          1071,
          1622,
          490,
          2031,
          1804,
          261,
          288,
          281,
          2031,
          288,
          1804,
          276,
          13,
          407,
          300,
          311,
          50920
        ]
      },
      {
        "avg_logprob": -0.2826909266020122,
        "compression_ratio": 1.5220125786163523,
        "end": 279.96000000000004,
        "id": 46,
        "no_speech_prob": 0.6441499590873718,
        "seek": 26136,
        "start": 272.48,
        "temperature": 0,
        "text": " me drawing a... An x. Whoa! That looks totally wrong. So first of all, let me say",
        "tokens": [
          50920,
          385,
          6316,
          257,
          485,
          1107,
          2031,
          13,
          7521,
          0,
          663,
          1542,
          3879,
          2085,
          13,
          407,
          700,
          295,
          439,
          11,
          718,
          385,
          584,
          51294
        ]
      },
      {
        "avg_logprob": -0.2826909266020122,
        "compression_ratio": 1.5220125786163523,
        "end": 288.36,
        "id": 47,
        "no_speech_prob": 0.6441499590873718,
        "seek": 26136,
        "start": 279.96000000000004,
        "temperature": 0,
        "text": " no fill. And the offset should be plus w divided by 2. So I need to offset all",
        "tokens": [
          51294,
          572,
          2836,
          13,
          400,
          264,
          18687,
          820,
          312,
          1804,
          261,
          6666,
          538,
          568,
          13,
          407,
          286,
          643,
          281,
          18687,
          439,
          51714
        ]
      },
      {
        "avg_logprob": -0.4889410654703776,
        "compression_ratio": 1.372093023255814,
        "end": 297.72,
        "id": 48,
        "no_speech_prob": 0.25982075929641724,
        "seek": 28836,
        "start": 288.36,
        "temperature": 0,
        "text": " those spots. Oh! And then this would be... Oh no no no no no no no no no no no no. Oh my god!",
        "tokens": [
          50364,
          729,
          10681,
          13,
          876,
          0,
          400,
          550,
          341,
          576,
          312,
          485,
          876,
          572,
          572,
          572,
          572,
          572,
          572,
          572,
          572,
          572,
          572,
          572,
          572,
          13,
          876,
          452,
          3044,
          0,
          50832
        ]
      },
      {
        "avg_logprob": -0.4889410654703776,
        "compression_ratio": 1.372093023255814,
        "end": 313.56,
        "id": 49,
        "no_speech_prob": 0.25982075929641724,
        "seek": 28836,
        "start": 297.72,
        "temperature": 0,
        "text": " Help! Let's diagram this. I have a 3 by 3 board, right? This is kind of x equals 0.",
        "tokens": [
          50832,
          10773,
          0,
          961,
          311,
          10686,
          341,
          13,
          286,
          362,
          257,
          805,
          538,
          805,
          3150,
          11,
          558,
          30,
          639,
          307,
          733,
          295,
          2031,
          6915,
          1958,
          13,
          51624
        ]
      },
      {
        "avg_logprob": -0.24268533991671157,
        "compression_ratio": 1.7116564417177915,
        "end": 320.28000000000003,
        "id": 50,
        "no_speech_prob": 0.12764951586723328,
        "seek": 31356,
        "start": 313.56,
        "temperature": 0,
        "text": " This is x equals 1. This is x equals 2. This is y equals 0. This is y equals 1. This is y",
        "tokens": [
          50364,
          639,
          307,
          2031,
          6915,
          502,
          13,
          639,
          307,
          2031,
          6915,
          568,
          13,
          639,
          307,
          288,
          6915,
          1958,
          13,
          639,
          307,
          288,
          6915,
          502,
          13,
          639,
          307,
          288,
          50700
        ]
      },
      {
        "avg_logprob": -0.24268533991671157,
        "compression_ratio": 1.7116564417177915,
        "end": 329.96,
        "id": 51,
        "no_speech_prob": 0.12764951586723328,
        "seek": 31356,
        "start": 320.28000000000003,
        "temperature": 0,
        "text": " equals 2. So an x should be drawn from here from x y x y to x plus h y plus h. The x I did",
        "tokens": [
          50700,
          6915,
          568,
          13,
          407,
          364,
          2031,
          820,
          312,
          10117,
          490,
          510,
          490,
          2031,
          288,
          2031,
          288,
          281,
          2031,
          1804,
          276,
          288,
          1804,
          276,
          13,
          440,
          2031,
          286,
          630,
          51184
        ]
      },
      {
        "avg_logprob": -0.24268533991671157,
        "compression_ratio": 1.7116564417177915,
        "end": 340.32,
        "id": 52,
        "no_speech_prob": 0.12764951586723328,
        "seek": 31356,
        "start": 329.96,
        "temperature": 0,
        "text": " correctly. Let's go back to here and comment out the ellipse. And let's make the board all full of",
        "tokens": [
          51184,
          8944,
          13,
          961,
          311,
          352,
          646,
          281,
          510,
          293,
          2871,
          484,
          264,
          8284,
          48041,
          13,
          400,
          718,
          311,
          652,
          264,
          3150,
          439,
          1577,
          295,
          51702
        ]
      },
      {
        "avg_logprob": -0.363294782136616,
        "compression_ratio": 1.5186915887850467,
        "end": 357.2,
        "id": 53,
        "no_speech_prob": 0.23933865129947662,
        "seek": 34032,
        "start": 340.32,
        "temperature": 0,
        "text": " x's. Let's just make the top row all full of x's. Oh my goodness. Everybody, I just lost like 45 minutes. Not really that long by accident because I had an x here. This needs to be y.",
        "tokens": [
          50364,
          2031,
          311,
          13,
          961,
          311,
          445,
          652,
          264,
          1192,
          5386,
          439,
          1577,
          295,
          2031,
          311,
          13,
          876,
          452,
          8387,
          13,
          7646,
          11,
          286,
          445,
          2731,
          411,
          6905,
          2077,
          13,
          1726,
          534,
          300,
          938,
          538,
          6398,
          570,
          286,
          632,
          364,
          2031,
          510,
          13,
          639,
          2203,
          281,
          312,
          288,
          13,
          51208
        ]
      },
      {
        "avg_logprob": -0.363294782136616,
        "compression_ratio": 1.5186915887850467,
        "end": 368.2,
        "id": 54,
        "no_speech_prob": 0.23933865129947662,
        "seek": 34032,
        "start": 357.2,
        "temperature": 0,
        "text": " Okay, so now we can see the x's. Let's draw the grid. We can see the x's. Well those are really giant x's. Now let's put the circles back in.",
        "tokens": [
          51208,
          1033,
          11,
          370,
          586,
          321,
          393,
          536,
          264,
          2031,
          311,
          13,
          961,
          311,
          2642,
          264,
          10748,
          13,
          492,
          393,
          536,
          264,
          2031,
          311,
          13,
          1042,
          729,
          366,
          534,
          7410,
          2031,
          311,
          13,
          823,
          718,
          311,
          829,
          264,
          13040,
          646,
          294,
          13,
          51758
        ]
      },
      {
        "avg_logprob": -0.31980522473653156,
        "compression_ratio": 1.6986899563318778,
        "end": 396.2,
        "id": 55,
        "no_speech_prob": 0.1293952912092209,
        "seek": 36820,
        "start": 369.2,
        "temperature": 0,
        "text": " Ah, the circles need to be, I need to say ellipse mode corner. There we go. Oh boy. So the x's are all kind of connected in a way that looks weird. So actually it wouldn't make sense to not draw everything relative to the corners but to draw everything relative to the centers. And I could have just used text align and gone back with the letters. But I want to draw it. I want to draw it.",
        "tokens": [
          50414,
          2438,
          11,
          264,
          13040,
          643,
          281,
          312,
          11,
          286,
          643,
          281,
          584,
          8284,
          48041,
          4391,
          4538,
          13,
          821,
          321,
          352,
          13,
          876,
          3237,
          13,
          407,
          264,
          2031,
          311,
          366,
          439,
          733,
          295,
          4582,
          294,
          257,
          636,
          300,
          1542,
          3657,
          13,
          407,
          767,
          309,
          2759,
          380,
          652,
          2020,
          281,
          406,
          2642,
          1203,
          4972,
          281,
          264,
          12413,
          457,
          281,
          2642,
          1203,
          4972,
          281,
          264,
          10898,
          13,
          400,
          286,
          727,
          362,
          445,
          1143,
          2487,
          7975,
          293,
          2780,
          646,
          365,
          264,
          7825,
          13,
          583,
          286,
          528,
          281,
          2642,
          309,
          13,
          286,
          528,
          281,
          2642,
          309,
          13,
          51764
        ]
      },
      {
        "avg_logprob": -0.26797489787256995,
        "compression_ratio": 1.648780487804878,
        "end": 419.2,
        "id": 56,
        "no_speech_prob": 0.9389210343360901,
        "seek": 39620,
        "start": 396.2,
        "temperature": 0,
        "text": " So I'm going to draw everything relative to the center. You'll see. This is going to improve it. Boy this is a great, this is really going super well so far. So what I'm going to do is say each x is the, it's index into it's column and row times the width plus width divided by 2 plus height divided by 2. That offsets everything by half.",
        "tokens": [
          50364,
          407,
          286,
          478,
          516,
          281,
          2642,
          1203,
          4972,
          281,
          264,
          3056,
          13,
          509,
          603,
          536,
          13,
          639,
          307,
          516,
          281,
          3470,
          309,
          13,
          9486,
          341,
          307,
          257,
          869,
          11,
          341,
          307,
          534,
          516,
          1687,
          731,
          370,
          1400,
          13,
          407,
          437,
          286,
          478,
          516,
          281,
          360,
          307,
          584,
          1184,
          2031,
          307,
          264,
          11,
          309,
          311,
          8186,
          666,
          309,
          311,
          7738,
          293,
          5386,
          1413,
          264,
          11402,
          1804,
          11402,
          6666,
          538,
          568,
          1804,
          6681,
          6666,
          538,
          568,
          13,
          663,
          39457,
          1385,
          1203,
          538,
          1922,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.2633633848096504,
        "compression_ratio": 1.6165413533834587,
        "end": 436.2,
        "id": 57,
        "no_speech_prob": 0.9472535252571106,
        "seek": 41920,
        "start": 420.2,
        "temperature": 0,
        "text": " And then I'm actually going to say the size, I'm going to have something called the, I'll call this the x size. I'm going to have this equal to w divided by 2. Half of that. And then I'm going to say x minus x size.",
        "tokens": [
          50414,
          400,
          550,
          286,
          478,
          767,
          516,
          281,
          584,
          264,
          2744,
          11,
          286,
          478,
          516,
          281,
          362,
          746,
          1219,
          264,
          11,
          286,
          603,
          818,
          341,
          264,
          2031,
          2744,
          13,
          286,
          478,
          516,
          281,
          362,
          341,
          2681,
          281,
          261,
          6666,
          538,
          568,
          13,
          15917,
          295,
          300,
          13,
          400,
          550,
          286,
          478,
          516,
          281,
          584,
          2031,
          3175,
          2031,
          2744,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.27966997027397156,
        "compression_ratio": 1.127906976744186,
        "end": 453.2,
        "id": 58,
        "no_speech_prob": 0.9415635466575623,
        "seek": 43620,
        "start": 436.2,
        "temperature": 0,
        "text": " Y minus x size to x plus x size comma, let's just call this xr. Like kind of like the x's radius.",
        "tokens": [
          50364,
          398,
          3175,
          2031,
          2744,
          281,
          2031,
          1804,
          2031,
          2744,
          22117,
          11,
          718,
          311,
          445,
          818,
          341,
          2031,
          81,
          13,
          1743,
          733,
          295,
          411,
          264,
          2031,
          311,
          15845,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.18407869338989258,
        "compression_ratio": 1.3523809523809525,
        "end": 476.2,
        "id": 59,
        "no_speech_prob": 0.7661809325218201,
        "seek": 45320,
        "start": 453.2,
        "temperature": 0,
        "text": " And then this one will be plus xr to y minus xr and then to x minus xr to y plus xr. And then width divided by 4. There we go! There's my x's.",
        "tokens": [
          50364,
          400,
          550,
          341,
          472,
          486,
          312,
          1804,
          2031,
          81,
          281,
          288,
          3175,
          2031,
          81,
          293,
          550,
          281,
          2031,
          3175,
          2031,
          81,
          281,
          288,
          1804,
          2031,
          81,
          13,
          400,
          550,
          11402,
          6666,
          538,
          1017,
          13,
          821,
          321,
          352,
          0,
          821,
          311,
          452,
          2031,
          311,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.20552165167672293,
        "compression_ratio": 1.5449438202247192,
        "end": 497.2,
        "id": 60,
        "no_speech_prob": 0.7248010635375977,
        "seek": 47620,
        "start": 476.2,
        "temperature": 0,
        "text": " And let's make the stroke weight 4. There's my x's. And now the o's, no more ellipse mode. And let's make this w divided by 4 or divided by 2. There we go! Look! So now this is what the tic-tac-toe board looks like. Yeah, I like the way it looks better now. That was painful.",
        "tokens": [
          50364,
          400,
          718,
          311,
          652,
          264,
          12403,
          3364,
          1017,
          13,
          821,
          311,
          452,
          2031,
          311,
          13,
          400,
          586,
          264,
          277,
          311,
          11,
          572,
          544,
          8284,
          48041,
          4391,
          13,
          400,
          718,
          311,
          652,
          341,
          261,
          6666,
          538,
          1017,
          420,
          6666,
          538,
          568,
          13,
          821,
          321,
          352,
          0,
          2053,
          0,
          407,
          586,
          341,
          307,
          437,
          264,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          3150,
          1542,
          411,
          13,
          865,
          11,
          286,
          411,
          264,
          636,
          309,
          1542,
          1101,
          586,
          13,
          663,
          390,
          11697,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.20601382154099485,
        "compression_ratio": 1.7027027027027026,
        "end": 521.2,
        "id": 61,
        "no_speech_prob": 0.35217422246932983,
        "seek": 49720,
        "start": 498.2,
        "temperature": 0,
        "text": " So now let's set it up as blank. Oh, and by the way, I've reversed my x's and y's. So this should actually be the x's should be j and the y's should be i. Or actually let's just do it the other way around. Let's keep x's i and y's j but do the j loop as the outer loop and the i loop as the inner loop. There we go.",
        "tokens": [
          50414,
          407,
          586,
          718,
          311,
          992,
          309,
          493,
          382,
          8247,
          13,
          876,
          11,
          293,
          538,
          264,
          636,
          11,
          286,
          600,
          30563,
          452,
          2031,
          311,
          293,
          288,
          311,
          13,
          407,
          341,
          820,
          767,
          312,
          264,
          2031,
          311,
          820,
          312,
          361,
          293,
          264,
          288,
          311,
          820,
          312,
          741,
          13,
          1610,
          767,
          718,
          311,
          445,
          360,
          309,
          264,
          661,
          636,
          926,
          13,
          961,
          311,
          1066,
          2031,
          311,
          741,
          293,
          288,
          311,
          361,
          457,
          360,
          264,
          361,
          6367,
          382,
          264,
          10847,
          6367,
          293,
          264,
          741,
          6367,
          382,
          264,
          7284,
          6367,
          13,
          821,
          321,
          352,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.25049970626831053,
        "compression_ratio": 1.406015037593985,
        "end": 547.2,
        "id": 62,
        "no_speech_prob": 0.2567954957485199,
        "seek": 52120,
        "start": 521.2,
        "temperature": 0,
        "text": " Okay. So now what I want to do next is play the game. So let's have a variable called currentPlayer and currentPlayer is equal to player1. Let's randomly pick between player1 and player2.",
        "tokens": [
          50364,
          1033,
          13,
          407,
          586,
          437,
          286,
          528,
          281,
          360,
          958,
          307,
          862,
          264,
          1216,
          13,
          407,
          718,
          311,
          362,
          257,
          7006,
          1219,
          2190,
          24262,
          260,
          293,
          2190,
          24262,
          260,
          307,
          2681,
          281,
          4256,
          16,
          13,
          961,
          311,
          16979,
          1888,
          1296,
          4256,
          16,
          293,
          4256,
          17,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.26204894936603046,
        "compression_ratio": 1.4409448818897639,
        "end": 560.2,
        "id": 63,
        "no_speech_prob": 0.8721519112586975,
        "seek": 54720,
        "start": 547.2,
        "temperature": 0,
        "text": " So every time we start the game, the currentPlayer... and let's actually make these players equal... let's make this an array. I like the idea of making this an array for some reason.",
        "tokens": [
          50364,
          407,
          633,
          565,
          321,
          722,
          264,
          1216,
          11,
          264,
          2190,
          24262,
          260,
          485,
          293,
          718,
          311,
          767,
          652,
          613,
          4150,
          2681,
          485,
          718,
          311,
          652,
          341,
          364,
          10225,
          13,
          286,
          411,
          264,
          1558,
          295,
          1455,
          341,
          364,
          10225,
          337,
          512,
          1778,
          13,
          51014
        ]
      },
      {
        "avg_logprob": -0.31370741980416433,
        "compression_ratio": 1.5,
        "end": 586.2,
        "id": 64,
        "no_speech_prob": 0.9122217893600464,
        "seek": 56020,
        "start": 560.2,
        "temperature": 0,
        "text": " And let's have the currentPlayer be players index 0 or the currentPlayer is players index 1. And then this... we can make 1 is a circle and... sorry, 0 is a circle. 0 is the x. I did it right.",
        "tokens": [
          50364,
          400,
          718,
          311,
          362,
          264,
          2190,
          24262,
          260,
          312,
          4150,
          8186,
          1958,
          420,
          264,
          2190,
          24262,
          260,
          307,
          4150,
          8186,
          502,
          13,
          400,
          550,
          341,
          485,
          321,
          393,
          652,
          502,
          307,
          257,
          6329,
          293,
          485,
          2597,
          11,
          1958,
          307,
          257,
          6329,
          13,
          1958,
          307,
          264,
          2031,
          13,
          286,
          630,
          309,
          558,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.21404790096595638,
        "compression_ratio": 1.2955974842767295,
        "end": 607.2,
        "id": 65,
        "no_speech_prob": 0.7248004078865051,
        "seek": 58620,
        "start": 587.2,
        "temperature": 0,
        "text": " 0 is the x. Index 1 is the circle. What's going on here? Where's my error? Line 44. Too many brackets, huh? Oh, I need a closing bracket for setup. Okay. Come back, board. And let's make the background 255.",
        "tokens": [
          50414,
          1958,
          307,
          264,
          2031,
          13,
          33552,
          502,
          307,
          264,
          6329,
          13,
          708,
          311,
          516,
          322,
          510,
          30,
          2305,
          311,
          452,
          6713,
          30,
          14670,
          16408,
          13,
          11395,
          867,
          26179,
          11,
          7020,
          30,
          876,
          11,
          286,
          643,
          257,
          10377,
          16904,
          337,
          8657,
          13,
          1033,
          13,
          2492,
          646,
          11,
          3150,
          13,
          400,
          718,
          311,
          652,
          264,
          3678,
          3552,
          20,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.22871500485903257,
        "compression_ratio": 1.5193370165745856,
        "end": 628.2,
        "id": 66,
        "no_speech_prob": 0.6547471880912781,
        "seek": 60720,
        "start": 607.2,
        "temperature": 0,
        "text": " Oh, this is very silly because I can say... the whole reason for me doing that is I can... in p5, I can say currentPlayer equals randomPlayers. So this will pick a random player. I really need to see those lines. So let's draw the lines. Let's draw a line from w0 to wHeight.",
        "tokens": [
          50364,
          876,
          11,
          341,
          307,
          588,
          11774,
          570,
          286,
          393,
          584,
          485,
          264,
          1379,
          1778,
          337,
          385,
          884,
          300,
          307,
          286,
          393,
          485,
          294,
          280,
          20,
          11,
          286,
          393,
          584,
          2190,
          24262,
          260,
          6915,
          4974,
          24262,
          433,
          13,
          407,
          341,
          486,
          1888,
          257,
          4974,
          4256,
          13,
          286,
          534,
          643,
          281,
          536,
          729,
          3876,
          13,
          407,
          718,
          311,
          2642,
          264,
          3876,
          13,
          961,
          311,
          2642,
          257,
          1622,
          490,
          261,
          15,
          281,
          261,
          5205,
          397,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.23770000139872233,
        "compression_ratio": 1.3722627737226278,
        "end": 651.2,
        "id": 67,
        "no_speech_prob": 0.9439560770988464,
        "seek": 62820,
        "start": 629.2,
        "temperature": 0,
        "text": " Oh, no, no, no. So to w the whole height. Then we'll draw a line from w times 2. So I just want to draw that crisscross and we'll do the same thing for 0 to width. And this will be h to h.",
        "tokens": [
          50414,
          876,
          11,
          572,
          11,
          572,
          11,
          572,
          13,
          407,
          281,
          261,
          264,
          1379,
          6681,
          13,
          1396,
          321,
          603,
          2642,
          257,
          1622,
          490,
          261,
          1413,
          568,
          13,
          407,
          286,
          445,
          528,
          281,
          2642,
          300,
          941,
          891,
          35418,
          293,
          321,
          603,
          360,
          264,
          912,
          551,
          337,
          1958,
          281,
          11402,
          13,
          400,
          341,
          486,
          312,
          276,
          281,
          276,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.18414053550133339,
        "compression_ratio": 1.4973821989528795,
        "end": 673.2,
        "id": 68,
        "no_speech_prob": 0.8457586169242859,
        "seek": 65120,
        "start": 651.2,
        "temperature": 0,
        "text": " And then h times 2 to h times 2. Now, really what I should do is make this now interactive so that you could click and add the x or the y. I think I might leave that as a little challenge to you. I'm just going to have the computer play the game of tic-tac-toe and see if somebody wins.",
        "tokens": [
          50364,
          400,
          550,
          276,
          1413,
          568,
          281,
          276,
          1413,
          568,
          13,
          823,
          11,
          534,
          437,
          286,
          820,
          360,
          307,
          652,
          341,
          586,
          15141,
          370,
          300,
          291,
          727,
          2052,
          293,
          909,
          264,
          2031,
          420,
          264,
          288,
          13,
          286,
          519,
          286,
          1062,
          1856,
          300,
          382,
          257,
          707,
          3430,
          281,
          291,
          13,
          286,
          478,
          445,
          516,
          281,
          362,
          264,
          3820,
          862,
          264,
          1216,
          295,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          293,
          536,
          498,
          2618,
          10641,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.19563385680481626,
        "compression_ratio": 1.6666666666666667,
        "end": 698.2,
        "id": 69,
        "no_speech_prob": 0.7771962881088257,
        "seek": 67320,
        "start": 673.2,
        "temperature": 0,
        "text": " So either the board will be full and it's a tie or somebody will win. And I won't use any intelligent algorithm. I'm just going to have each player place a random... pick a random spot. So what I'm going to do is I'm also going to make an array called available. So each available spot in the beginning, I'll just say a nest... I'm going to make a nested loop.",
        "tokens": [
          50364,
          407,
          2139,
          264,
          3150,
          486,
          312,
          1577,
          293,
          309,
          311,
          257,
          7582,
          420,
          2618,
          486,
          1942,
          13,
          400,
          286,
          1582,
          380,
          764,
          604,
          13232,
          9284,
          13,
          286,
          478,
          445,
          516,
          281,
          362,
          1184,
          4256,
          1081,
          257,
          4974,
          485,
          1888,
          257,
          4974,
          4008,
          13,
          407,
          437,
          286,
          478,
          516,
          281,
          360,
          307,
          286,
          478,
          611,
          516,
          281,
          652,
          364,
          10225,
          1219,
          2435,
          13,
          407,
          1184,
          2435,
          4008,
          294,
          264,
          2863,
          11,
          286,
          603,
          445,
          584,
          257,
          15646,
          485,
          286,
          478,
          516,
          281,
          652,
          257,
          15646,
          292,
          6367,
          13,
          51614
        ]
      },
      {
        "avg_logprob": -0.2636783719062805,
        "compression_ratio": 1.4438202247191012,
        "end": 722.2,
        "id": 70,
        "no_speech_prob": 0.4493342936038971,
        "seek": 69820,
        "start": 698.2,
        "temperature": 0,
        "text": " So much for making me super beginner friendly. So I'm going to say available.push an i and a j. So this is right now every little pair of index values for that grid is available. So each time through draw, let's make a function that's called like next turn.",
        "tokens": [
          50364,
          407,
          709,
          337,
          1455,
          385,
          1687,
          22080,
          9208,
          13,
          407,
          286,
          478,
          516,
          281,
          584,
          2435,
          13,
          79,
          1498,
          364,
          741,
          293,
          257,
          361,
          13,
          407,
          341,
          307,
          558,
          586,
          633,
          707,
          6119,
          295,
          8186,
          4190,
          337,
          300,
          10748,
          307,
          2435,
          13,
          407,
          1184,
          565,
          807,
          2642,
          11,
          718,
          311,
          652,
          257,
          2445,
          300,
          311,
          1219,
          411,
          958,
          1261,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.23683544685100688,
        "compression_ratio": 1.4473684210526316,
        "end": 742.2,
        "id": 71,
        "no_speech_prob": 0.9360939860343933,
        "seek": 72220,
        "start": 723.2,
        "temperature": 0,
        "text": " And we'll say spot that I'm picking is a random... I'm going to have to get an index. Index, because I want to remove it, is a... index is a random number that's between 0 and the length of how many things are available.",
        "tokens": [
          50414,
          400,
          321,
          603,
          584,
          4008,
          300,
          286,
          478,
          8867,
          307,
          257,
          4974,
          485,
          286,
          478,
          516,
          281,
          362,
          281,
          483,
          364,
          8186,
          13,
          33552,
          11,
          570,
          286,
          528,
          281,
          4159,
          309,
          11,
          307,
          257,
          485,
          8186,
          307,
          257,
          4974,
          1230,
          300,
          311,
          1296,
          1958,
          293,
          264,
          4641,
          295,
          577,
          867,
          721,
          366,
          2435,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.25448774036608246,
        "compression_ratio": 1.4383561643835616,
        "end": 764.2,
        "id": 72,
        "no_speech_prob": 0.7024819254875183,
        "seek": 74220,
        "start": 742.2,
        "temperature": 0,
        "text": " And then the spot is going to take that array available and remove that index value. The splice function will remove it and put it in spot. And then I'm going to say board.spot 0, spot 1. Oh, that's so awkward.",
        "tokens": [
          50364,
          400,
          550,
          264,
          4008,
          307,
          516,
          281,
          747,
          300,
          10225,
          2435,
          293,
          4159,
          300,
          8186,
          2158,
          13,
          440,
          4732,
          573,
          2445,
          486,
          4159,
          309,
          293,
          829,
          309,
          294,
          4008,
          13,
          400,
          550,
          286,
          478,
          516,
          281,
          584,
          3150,
          13,
          4952,
          310,
          1958,
          11,
          4008,
          502,
          13,
          876,
          11,
          300,
          311,
          370,
          11411,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.258368646776354,
        "compression_ratio": 1.5088757396449703,
        "end": 785.2,
        "id": 73,
        "no_speech_prob": 0.6441304683685303,
        "seek": 76420,
        "start": 764.2,
        "temperature": 0,
        "text": " But spot is a little array with two values in it, 0 and 1. And so this is not a comma, it's another little bracket. Oh, look how horrible that looks. Let's say... let's do let i equal spot index 0. Let j equal spot index 1. And then I'm in the board i, j.",
        "tokens": [
          50364,
          583,
          4008,
          307,
          257,
          707,
          10225,
          365,
          732,
          4190,
          294,
          309,
          11,
          1958,
          293,
          502,
          13,
          400,
          370,
          341,
          307,
          406,
          257,
          22117,
          11,
          309,
          311,
          1071,
          707,
          16904,
          13,
          876,
          11,
          574,
          577,
          9263,
          300,
          1542,
          13,
          961,
          311,
          584,
          485,
          718,
          311,
          360,
          718,
          741,
          2681,
          4008,
          8186,
          1958,
          13,
          961,
          361,
          2681,
          4008,
          8186,
          502,
          13,
          400,
          550,
          286,
          478,
          294,
          264,
          3150,
          741,
          11,
          361,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.28594970703125,
        "compression_ratio": 1.5032258064516129,
        "end": 811.2,
        "id": 74,
        "no_speech_prob": 0.7216079831123352,
        "seek": 78520,
        "start": 786.2,
        "temperature": 0,
        "text": " I'm going to say... the player, current player. And then current player should equal... let's just pick a random player. I mean, this is not the right way to do it. But mouse... let's just see if this works. Mouse pressed. Next turn.",
        "tokens": [
          50414,
          286,
          478,
          516,
          281,
          584,
          485,
          264,
          4256,
          11,
          2190,
          4256,
          13,
          400,
          550,
          2190,
          4256,
          820,
          2681,
          485,
          718,
          311,
          445,
          1888,
          257,
          4974,
          4256,
          13,
          286,
          914,
          11,
          341,
          307,
          406,
          264,
          558,
          636,
          281,
          360,
          309,
          13,
          583,
          9719,
          485,
          718,
          311,
          445,
          536,
          498,
          341,
          1985,
          13,
          29383,
          17355,
          13,
          3087,
          1261,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.21001188682787347,
        "compression_ratio": 1.4177215189873418,
        "end": 827.2,
        "id": 75,
        "no_speech_prob": 0.7662194967269897,
        "seek": 81120,
        "start": 812.2,
        "temperature": 0,
        "text": " So every time I click the mouse... current player is not a thing. When I splice it out, does it come in an array? Oh, how awful. It comes in an array, so I need to do that. There we go. There we go, I'm filling up the board.",
        "tokens": [
          50414,
          407,
          633,
          565,
          286,
          2052,
          264,
          9719,
          485,
          2190,
          4256,
          307,
          406,
          257,
          551,
          13,
          1133,
          286,
          4732,
          573,
          309,
          484,
          11,
          775,
          309,
          808,
          294,
          364,
          10225,
          30,
          876,
          11,
          577,
          11232,
          13,
          467,
          1487,
          294,
          364,
          10225,
          11,
          370,
          286,
          643,
          281,
          360,
          300,
          13,
          821,
          321,
          352,
          13,
          821,
          321,
          352,
          11,
          286,
          478,
          10623,
          493,
          264,
          3150,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.30580204411556844,
        "compression_ratio": 1.2413793103448276,
        "end": 839.2,
        "id": 76,
        "no_speech_prob": 0.915966808795929,
        "seek": 82720,
        "start": 828.2,
        "temperature": 0.4,
        "text": " I've done this in such a super awkward way, I might want to rethink this, but it does work. You watching this will make a nicer version of this.",
        "tokens": [
          50414,
          286,
          600,
          1096,
          341,
          294,
          1270,
          257,
          1687,
          11411,
          636,
          11,
          286,
          1062,
          528,
          281,
          34595,
          341,
          11,
          457,
          309,
          775,
          589,
          13,
          509,
          1976,
          341,
          486,
          652,
          257,
          22842,
          3037,
          295,
          341,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.2720827062924703,
        "compression_ratio": 1.5223880597014925,
        "end": 854.2,
        "id": 77,
        "no_speech_prob": 0.7929044365882874,
        "seek": 83920,
        "start": 840.2,
        "temperature": 0,
        "text": " But I want to go back and forth between the players. So current player should actually be an index into that array. So I actually want to say random players dot length, because I want that to be an index.",
        "tokens": [
          50414,
          583,
          286,
          528,
          281,
          352,
          646,
          293,
          5220,
          1296,
          264,
          4150,
          13,
          407,
          2190,
          4256,
          820,
          767,
          312,
          364,
          8186,
          666,
          300,
          10225,
          13,
          407,
          286,
          767,
          528,
          281,
          584,
          4974,
          4150,
          5893,
          4641,
          11,
          570,
          286,
          528,
          300,
          281,
          312,
          364,
          8186,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.26564812078708555,
        "compression_ratio": 1.525,
        "end": 874.2,
        "id": 78,
        "no_speech_prob": 0.6149770617485046,
        "seek": 85420,
        "start": 854.2,
        "temperature": 0,
        "text": " Because then when I am adding the thing to the board, I want it to be players index current player, because the next player should be current player plus 1 modulus players dot length.",
        "tokens": [
          50364,
          1436,
          550,
          562,
          286,
          669,
          5127,
          264,
          551,
          281,
          264,
          3150,
          11,
          286,
          528,
          309,
          281,
          312,
          4150,
          8186,
          2190,
          4256,
          11,
          570,
          264,
          958,
          4256,
          820,
          312,
          2190,
          4256,
          1804,
          502,
          42287,
          4150,
          5893,
          4641,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.2672909527290158,
        "compression_ratio": 1.1616161616161615,
        "end": 885.2,
        "id": 79,
        "no_speech_prob": 0.6000970602035522,
        "seek": 87420,
        "start": 874.2,
        "temperature": 0,
        "text": " So I built this in a way that you could have more than two players. So it should be OXOXOXOXO. Hey, O won that one.",
        "tokens": [
          50364,
          407,
          286,
          3094,
          341,
          294,
          257,
          636,
          300,
          291,
          727,
          362,
          544,
          813,
          732,
          4150,
          13,
          407,
          309,
          820,
          312,
          422,
          55,
          46,
          55,
          46,
          55,
          46,
          55,
          46,
          13,
          1911,
          11,
          422,
          1582,
          300,
          472,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.24407249230604905,
        "compression_ratio": 1.3617021276595744,
        "end": 905.2,
        "id": 80,
        "no_speech_prob": 0.7547053694725037,
        "seek": 88520,
        "start": 886.2,
        "temperature": 0,
        "text": " Alright, so this works with my wacky implementation. Now, I don't need mouse press to call next turn. I just want draw to call next turn. So it fills up, but I also want to check for a winner.",
        "tokens": [
          50414,
          2798,
          11,
          370,
          341,
          1985,
          365,
          452,
          42138,
          88,
          11420,
          13,
          823,
          11,
          286,
          500,
          380,
          643,
          9719,
          1886,
          281,
          818,
          958,
          1261,
          13,
          286,
          445,
          528,
          2642,
          281,
          818,
          958,
          1261,
          13,
          407,
          309,
          22498,
          493,
          11,
          457,
          286,
          611,
          528,
          281,
          1520,
          337,
          257,
          8507,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.24299916049890352,
        "compression_ratio": 1.5703703703703704,
        "end": 931.2,
        "id": 81,
        "no_speech_prob": 0.4960448741912842,
        "seek": 90520,
        "start": 906.2,
        "temperature": 0,
        "text": " So what I'm going to do, I'm going to write a function called check winner. And what I'm going to do in check winner is see, first of all, if board dot, if available dot length equals 0, then console dot log tie.",
        "tokens": [
          50414,
          407,
          437,
          286,
          478,
          516,
          281,
          360,
          11,
          286,
          478,
          516,
          281,
          2464,
          257,
          2445,
          1219,
          1520,
          8507,
          13,
          400,
          437,
          286,
          478,
          516,
          281,
          360,
          294,
          1520,
          8507,
          307,
          536,
          11,
          700,
          295,
          439,
          11,
          498,
          3150,
          5893,
          11,
          498,
          2435,
          5893,
          4641,
          6915,
          1958,
          11,
          550,
          11076,
          5893,
          3565,
          7582,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.21621930365468942,
        "compression_ratio": 1.371900826446281,
        "end": 948.2,
        "id": 82,
        "no_speech_prob": 0.0863187164068222,
        "seek": 93120,
        "start": 932.2,
        "temperature": 0,
        "text": " So it was a tie. So if the board fills up, it was a tie. But first I need to check, is there a winner? So let winner equal null. So I'm going to say there's a winner.",
        "tokens": [
          50414,
          407,
          309,
          390,
          257,
          7582,
          13,
          407,
          498,
          264,
          3150,
          22498,
          493,
          11,
          309,
          390,
          257,
          7582,
          13,
          583,
          700,
          286,
          643,
          281,
          1520,
          11,
          307,
          456,
          257,
          8507,
          30,
          407,
          718,
          8507,
          2681,
          18184,
          13,
          407,
          286,
          478,
          516,
          281,
          584,
          456,
          311,
          257,
          8507,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.23975276947021484,
        "compression_ratio": 1.3956043956043955,
        "end": 958.2,
        "id": 83,
        "no_speech_prob": 0.7744861245155334,
        "seek": 94820,
        "start": 948.2,
        "temperature": 0,
        "text": " Now what I'm going to do is check all of the, first I'm going to check all of the ways across. So let's first check horizontal.",
        "tokens": [
          50364,
          823,
          437,
          286,
          478,
          516,
          281,
          360,
          307,
          1520,
          439,
          295,
          264,
          11,
          700,
          286,
          478,
          516,
          281,
          1520,
          439,
          295,
          264,
          2098,
          2108,
          13,
          407,
          718,
          311,
          700,
          1520,
          12750,
          13,
          50864
        ]
      },
      {
        "avg_logprob": -0.2581196264787154,
        "compression_ratio": 1.4141414141414141,
        "end": 982.2,
        "id": 84,
        "no_speech_prob": 0.7519112229347229,
        "seek": 95820,
        "start": 958.2,
        "temperature": 0,
        "text": " So I is now the row. So if board index I, well that's the, is that the row? I don't remember. 0 equals board index I1 equals board index I2.",
        "tokens": [
          50364,
          407,
          286,
          307,
          586,
          264,
          5386,
          13,
          407,
          498,
          3150,
          8186,
          286,
          11,
          731,
          300,
          311,
          264,
          11,
          307,
          300,
          264,
          5386,
          30,
          286,
          500,
          380,
          1604,
          13,
          1958,
          6915,
          3150,
          8186,
          286,
          16,
          6915,
          3150,
          8186,
          286,
          17,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.2303728020709494,
        "compression_ratio": 1.4122137404580153,
        "end": 1002.2,
        "id": 85,
        "no_speech_prob": 0.8823564052581787,
        "seek": 98220,
        "start": 982.2,
        "temperature": 0,
        "text": " Then winner equals board index whatever I, whichever one it is. So if all three of those are equal, then the winner is whoever you picked. I can also check, I can check now the columns.",
        "tokens": [
          50364,
          1396,
          8507,
          6915,
          3150,
          8186,
          2035,
          286,
          11,
          24123,
          472,
          309,
          307,
          13,
          407,
          498,
          439,
          1045,
          295,
          729,
          366,
          2681,
          11,
          550,
          264,
          8507,
          307,
          11387,
          291,
          6183,
          13,
          286,
          393,
          611,
          1520,
          11,
          286,
          393,
          1520,
          586,
          264,
          13766,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.17293983890164283,
        "compression_ratio": 1.4465408805031446,
        "end": 1018.2,
        "id": 86,
        "no_speech_prob": 0.8806595206260681,
        "seek": 100220,
        "start": 1002.2,
        "temperature": 0,
        "text": " I don't remember which is which, but whatever. I'm doing one and the other. Then the winner is, if they're all equal, then I've got a winner. Now I need to check, so this would be vertical, except it might be the other way around.",
        "tokens": [
          50364,
          286,
          500,
          380,
          1604,
          597,
          307,
          597,
          11,
          457,
          2035,
          13,
          286,
          478,
          884,
          472,
          293,
          264,
          661,
          13,
          1396,
          264,
          8507,
          307,
          11,
          498,
          436,
          434,
          439,
          2681,
          11,
          550,
          286,
          600,
          658,
          257,
          8507,
          13,
          823,
          286,
          643,
          281,
          1520,
          11,
          370,
          341,
          576,
          312,
          9429,
          11,
          3993,
          309,
          1062,
          312,
          264,
          661,
          636,
          926,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.1840053820142559,
        "compression_ratio": 1.3559322033898304,
        "end": 1042.2,
        "id": 87,
        "no_speech_prob": 0.7247501611709595,
        "seek": 101820,
        "start": 1018.2,
        "temperature": 0,
        "text": " And now I need to check diagonal. So that's easy. I just want to say if board 0, 0 is equal to board 1, 1 is equal to board 2, 2, then the winner is board 0, 0.",
        "tokens": [
          50364,
          400,
          586,
          286,
          643,
          281,
          1520,
          21539,
          13,
          407,
          300,
          311,
          1858,
          13,
          286,
          445,
          528,
          281,
          584,
          498,
          3150,
          1958,
          11,
          1958,
          307,
          2681,
          281,
          3150,
          502,
          11,
          502,
          307,
          2681,
          281,
          3150,
          568,
          11,
          568,
          11,
          550,
          264,
          8507,
          307,
          3150,
          1958,
          11,
          1958,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.15433606894119925,
        "compression_ratio": 1.3981481481481481,
        "end": 1059.2,
        "id": 88,
        "no_speech_prob": 0.8722295165061951,
        "seek": 104220,
        "start": 1043.2,
        "temperature": 0,
        "text": " And then I can also check if board 2, 0 is equal to board 1, 1 is equal to board 0, 2, that would be the other diagonal, then the winner is board 2, 0.",
        "tokens": [
          50414,
          400,
          550,
          286,
          393,
          611,
          1520,
          498,
          3150,
          568,
          11,
          1958,
          307,
          2681,
          281,
          3150,
          502,
          11,
          502,
          307,
          2681,
          281,
          3150,
          1958,
          11,
          568,
          11,
          300,
          576,
          312,
          264,
          661,
          21539,
          11,
          550,
          264,
          8507,
          307,
          3150,
          568,
          11,
          1958,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.28795071804162226,
        "compression_ratio": 1.3186813186813187,
        "end": 1078.2,
        "id": 89,
        "no_speech_prob": 0.6149897575378418,
        "seek": 105920,
        "start": 1059.2,
        "temperature": 0,
        "text": " And now if there is no, if winner is still null and available is length, console.log tie, otherwise, console.log winner.",
        "tokens": [
          50364,
          400,
          586,
          498,
          456,
          307,
          572,
          11,
          498,
          8507,
          307,
          920,
          18184,
          293,
          2435,
          307,
          4641,
          11,
          11076,
          13,
          4987,
          7582,
          11,
          5911,
          11,
          11076,
          13,
          4987,
          8507,
          13,
          51314
        ]
      },
      {
        "avg_logprob": -0.28629669776329625,
        "compression_ratio": 1.1012658227848102,
        "end": 1095.2,
        "id": 90,
        "no_speech_prob": 0.6891829371452332,
        "seek": 107820,
        "start": 1078.2,
        "temperature": 0,
        "text": " All right. X is the winner. But if there's a winner, so let result equals check winner.",
        "tokens": [
          50364,
          1057,
          558,
          13,
          1783,
          307,
          264,
          8507,
          13,
          583,
          498,
          456,
          311,
          257,
          8507,
          11,
          370,
          718,
          1874,
          6915,
          1520,
          8507,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.22289608075068548,
        "compression_ratio": 1.1216216216216217,
        "end": 1110.2,
        "id": 91,
        "no_speech_prob": 0.21732407808303833,
        "seek": 109520,
        "start": 1095.2,
        "temperature": 0,
        "text": " If result is not equal to null, then no loop, stop the looping, console.log result.",
        "tokens": [
          50364,
          759,
          1874,
          307,
          406,
          2681,
          281,
          18184,
          11,
          550,
          572,
          6367,
          11,
          1590,
          264,
          6367,
          278,
          11,
          11076,
          13,
          4987,
          1874,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.4085534413655599,
        "compression_ratio": 1.108433734939759,
        "end": 1120.2,
        "id": 92,
        "no_speech_prob": 0.3040154278278351,
        "seek": 111020,
        "start": 1110.2,
        "temperature": 0,
        "text": " Why am I getting errors? Oh, OK. Is next turn happening? Next turn has to happen after this.",
        "tokens": [
          50364,
          1545,
          669,
          286,
          1242,
          13603,
          30,
          876,
          11,
          2264,
          13,
          1119,
          958,
          1261,
          2737,
          30,
          3087,
          1261,
          575,
          281,
          1051,
          934,
          341,
          13,
          50864
        ]
      },
      {
        "avg_logprob": -0.2519896825154622,
        "compression_ratio": 1.3578947368421053,
        "end": 1139.2,
        "id": 93,
        "no_speech_prob": 0.4804125130176544,
        "seek": 112020,
        "start": 1121.2,
        "temperature": 0,
        "text": " No. Oh! I did something so nuts. Look at this. I was like, that doesn't work. If this equals this equals that. That doesn't work.",
        "tokens": [
          50414,
          883,
          13,
          876,
          0,
          286,
          630,
          746,
          370,
          10483,
          13,
          2053,
          412,
          341,
          13,
          286,
          390,
          411,
          11,
          300,
          1177,
          380,
          589,
          13,
          759,
          341,
          6915,
          341,
          6915,
          300,
          13,
          663,
          1177,
          380,
          589,
          13,
          51314
        ]
      },
      {
        "avg_logprob": -0.22353572845458985,
        "compression_ratio": 1.3425925925925926,
        "end": 1161.2,
        "id": 94,
        "no_speech_prob": 0.7024052143096924,
        "seek": 113920,
        "start": 1140.2,
        "temperature": 0,
        "text": " This is the concept. I'm going to write a function called equals 3, A, B, C. And I'm going to return if A equals B and B equals C and A equals C.",
        "tokens": [
          50414,
          639,
          307,
          264,
          3410,
          13,
          286,
          478,
          516,
          281,
          2464,
          257,
          2445,
          1219,
          6915,
          805,
          11,
          316,
          11,
          363,
          11,
          383,
          13,
          400,
          286,
          478,
          516,
          281,
          2736,
          498,
          316,
          6915,
          363,
          293,
          363,
          6915,
          383,
          293,
          316,
          6915,
          383,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.22535186343722874,
        "compression_ratio": 1.6163522012578617,
        "end": 1172.2,
        "id": 95,
        "no_speech_prob": 0.2538502812385559,
        "seek": 116120,
        "start": 1161.2,
        "temperature": 0,
        "text": " So this is really the only way, I mean, there's other ways, but this will actually check if A is equal to B and B is equal to C and A is equal to C.",
        "tokens": [
          50364,
          407,
          341,
          307,
          534,
          264,
          787,
          636,
          11,
          286,
          914,
          11,
          456,
          311,
          661,
          2098,
          11,
          457,
          341,
          486,
          767,
          1520,
          498,
          316,
          307,
          2681,
          281,
          363,
          293,
          363,
          307,
          2681,
          281,
          383,
          293,
          316,
          307,
          2681,
          281,
          383,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.22535186343722874,
        "compression_ratio": 1.6163522012578617,
        "end": 1177.2,
        "id": 96,
        "no_speech_prob": 0.2538502812385559,
        "seek": 116120,
        "start": 1172.2,
        "temperature": 0,
        "text": " If all of them are equal, then all three of them are equal. So I'm sure people have been screaming at there.",
        "tokens": [
          50914,
          759,
          439,
          295,
          552,
          366,
          2681,
          11,
          550,
          439,
          1045,
          295,
          552,
          366,
          2681,
          13,
          407,
          286,
          478,
          988,
          561,
          362,
          668,
          12636,
          412,
          456,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.2578647901427071,
        "compression_ratio": 1.5223880597014925,
        "end": 1192.2,
        "id": 97,
        "no_speech_prob": 0.09534631669521332,
        "seek": 117720,
        "start": 1178.2,
        "temperature": 0,
        "text": " So now I can say equals 3 and like this. And then same thing here. So this is checking all the horizontal.",
        "tokens": [
          50414,
          407,
          586,
          286,
          393,
          584,
          6915,
          805,
          293,
          411,
          341,
          13,
          400,
          550,
          912,
          551,
          510,
          13,
          407,
          341,
          307,
          8568,
          439,
          264,
          12750,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.2578647901427071,
        "compression_ratio": 1.5223880597014925,
        "end": 1198.2,
        "id": 98,
        "no_speech_prob": 0.09534631669521332,
        "seek": 117720,
        "start": 1194.2,
        "temperature": 0,
        "text": " This is checking all the vertical. Even I have this mixed up. This is checking the two diagonals.",
        "tokens": [
          51214,
          639,
          307,
          8568,
          439,
          264,
          9429,
          13,
          2754,
          286,
          362,
          341,
          7467,
          493,
          13,
          639,
          307,
          8568,
          264,
          732,
          17405,
          1124,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.29109004236036734,
        "compression_ratio": 1.4155844155844155,
        "end": 1209.2,
        "id": 99,
        "no_speech_prob": 0.2018010914325714,
        "seek": 119820,
        "start": 1199.2,
        "temperature": 0,
        "text": " If the winner is null and available, length is zero. We have a tie. Is that redundant? Yes, this is redundant.",
        "tokens": [
          50414,
          759,
          264,
          8507,
          307,
          18184,
          293,
          2435,
          11,
          4641,
          307,
          4018,
          13,
          492,
          362,
          257,
          7582,
          13,
          1119,
          300,
          40997,
          30,
          1079,
          11,
          341,
          307,
          40997,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.29109004236036734,
        "compression_ratio": 1.4155844155844155,
        "end": 1222.2,
        "id": 100,
        "no_speech_prob": 0.2018010914325714,
        "seek": 119820,
        "start": 1211.2,
        "temperature": 0,
        "text": " Yes. Oops, where am I? Am I console logging somewhere else? Oh, I forgot. Oh, I'm not returning the winner.",
        "tokens": [
          51014,
          1079,
          13,
          21726,
          11,
          689,
          669,
          286,
          30,
          2012,
          286,
          11076,
          27991,
          4079,
          1646,
          30,
          876,
          11,
          286,
          5298,
          13,
          876,
          11,
          286,
          478,
          406,
          12678,
          264,
          8507,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.22304793535652806,
        "compression_ratio": 1.4701986754966887,
        "end": 1229.2,
        "id": 101,
        "no_speech_prob": 0.03789146989583969,
        "seek": 122220,
        "start": 1223.2,
        "temperature": 0,
        "text": " And I'm console logging a lot of other nonsense here. I'm doing a horrible job at this.",
        "tokens": [
          50414,
          400,
          286,
          478,
          11076,
          27991,
          257,
          688,
          295,
          661,
          14925,
          510,
          13,
          286,
          478,
          884,
          257,
          9263,
          1691,
          412,
          341,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.22304793535652806,
        "compression_ratio": 1.4701986754966887,
        "end": 1237.2,
        "id": 102,
        "no_speech_prob": 0.03789146989583969,
        "seek": 122220,
        "start": 1229.2,
        "temperature": 0,
        "text": " I am not return. This should be return. I'm rushing. You should never code and rush. Take a deep breath and relax while you're coding.",
        "tokens": [
          50714,
          286,
          669,
          406,
          2736,
          13,
          639,
          820,
          312,
          2736,
          13,
          286,
          478,
          25876,
          13,
          509,
          820,
          1128,
          3089,
          293,
          9300,
          13,
          3664,
          257,
          2452,
          6045,
          293,
          5789,
          1339,
          291,
          434,
          17720,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.28391419795521516,
        "compression_ratio": 1.4242424242424243,
        "end": 1252.2,
        "id": 103,
        "no_speech_prob": 0.3738497197628021,
        "seek": 123720,
        "start": 1237.2,
        "temperature": 0,
        "text": " Return tie. Otherwise, return winner. Now, oh, they could be equal. They can't be blank.",
        "tokens": [
          50364,
          24350,
          7582,
          13,
          10328,
          11,
          2736,
          8507,
          13,
          823,
          11,
          1954,
          11,
          436,
          727,
          312,
          2681,
          13,
          814,
          393,
          380,
          312,
          8247,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.28391419795521516,
        "compression_ratio": 1.4242424242424243,
        "end": 1260.2,
        "id": 104,
        "no_speech_prob": 0.3738497197628021,
        "seek": 123720,
        "start": 1252.2,
        "temperature": 0,
        "text": " They can't all be, then somebody wins. They have to be full. So, okay, and A is not equal to blank.",
        "tokens": [
          51114,
          814,
          393,
          380,
          439,
          312,
          11,
          550,
          2618,
          10641,
          13,
          814,
          362,
          281,
          312,
          1577,
          13,
          407,
          11,
          1392,
          11,
          293,
          316,
          307,
          406,
          2681,
          281,
          8247,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.14303388315088608,
        "compression_ratio": 1.6129032258064515,
        "end": 1269.2,
        "id": 105,
        "no_speech_prob": 0.22539763152599335,
        "seek": 126020,
        "start": 1261.2,
        "temperature": 0,
        "text": " There we go. X is the winner. Let's run it again. X is the winner. O is the winner. X is the winner.",
        "tokens": [
          50414,
          821,
          321,
          352,
          13,
          1783,
          307,
          264,
          8507,
          13,
          961,
          311,
          1190,
          309,
          797,
          13,
          1783,
          307,
          264,
          8507,
          13,
          422,
          307,
          264,
          8507,
          13,
          1783,
          307,
          264,
          8507,
          13,
          50814
        ]
      },
      {
        "avg_logprob": -0.4166916211446126,
        "compression_ratio": 1.0476190476190477,
        "end": 1288.2,
        "id": 106,
        "no_speech_prob": 0.35216066241264343,
        "seek": 126920,
        "start": 1269.2,
        "temperature": 0,
        "text": " So, let's at least make a createPx, createP winner style color FFF. Oh, result 32 point.",
        "tokens": [
          50364,
          407,
          11,
          718,
          311,
          412,
          1935,
          652,
          257,
          1884,
          47,
          87,
          11,
          1884,
          47,
          8507,
          3758,
          2017,
          479,
          6345,
          13,
          876,
          11,
          1874,
          8858,
          935,
          13,
          51314
        ]
      },
      {
        "avg_logprob": -0.25885550181070965,
        "compression_ratio": 1.3402777777777777,
        "end": 1299.2,
        "id": 107,
        "no_speech_prob": 0.35217416286468506,
        "seek": 128820,
        "start": 1289.2,
        "temperature": 0,
        "text": " There we go. That's what I'm looking for. Okay, now every time I run it, tie. O, X, O wins.",
        "tokens": [
          50414,
          821,
          321,
          352,
          13,
          663,
          311,
          437,
          286,
          478,
          1237,
          337,
          13,
          1033,
          11,
          586,
          633,
          565,
          286,
          1190,
          309,
          11,
          7582,
          13,
          422,
          11,
          1783,
          11,
          422,
          10641,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.25885550181070965,
        "compression_ratio": 1.3402777777777777,
        "end": 1306.2,
        "id": 108,
        "no_speech_prob": 0.35217416286468506,
        "seek": 128820,
        "start": 1299.2,
        "temperature": 0,
        "text": " And let's change the frame rate. We're going to make this super dramatic. Frame rate, frame rate one.",
        "tokens": [
          50914,
          400,
          718,
          311,
          1319,
          264,
          3920,
          3314,
          13,
          492,
          434,
          516,
          281,
          652,
          341,
          1687,
          12023,
          13,
          31628,
          3314,
          11,
          3920,
          3314,
          472,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.22291791439056396,
        "compression_ratio": 1.4052287581699345,
        "end": 1318.2,
        "id": 109,
        "no_speech_prob": 0.16024373471736908,
        "seek": 130620,
        "start": 1306.2,
        "temperature": 0,
        "text": " Okay, here we go, everybody. O, X, O. Where's X going to go? O, X, O, X, O. It was a tie. Oh, no, O won. O won.",
        "tokens": [
          50364,
          1033,
          11,
          510,
          321,
          352,
          11,
          2201,
          13,
          422,
          11,
          1783,
          11,
          422,
          13,
          2305,
          311,
          1783,
          516,
          281,
          352,
          30,
          422,
          11,
          1783,
          11,
          422,
          11,
          1783,
          11,
          422,
          13,
          467,
          390,
          257,
          7582,
          13,
          876,
          11,
          572,
          11,
          422,
          1582,
          13,
          422,
          1582,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.22291791439056396,
        "compression_ratio": 1.4052287581699345,
        "end": 1333.2,
        "id": 110,
        "no_speech_prob": 0.16024373471736908,
        "seek": 130620,
        "start": 1318.2,
        "temperature": 0,
        "text": " Congratulations, O. Let's play this one more time. Here we go. X, O. What will happen? Place your bets.",
        "tokens": [
          50964,
          9694,
          11,
          422,
          13,
          961,
          311,
          862,
          341,
          472,
          544,
          565,
          13,
          1692,
          321,
          352,
          13,
          1783,
          11,
          422,
          13,
          708,
          486,
          1051,
          30,
          13637,
          428,
          39922,
          13,
          51714
        ]
      },
      {
        "avg_logprob": -0.20786981324891787,
        "compression_ratio": 1.3630952380952381,
        "end": 1352.2,
        "id": 111,
        "no_speech_prob": 0.1112261638045311,
        "seek": 133320,
        "start": 1333.2,
        "temperature": 0,
        "text": " This is like, X won. Congratulations, X. X, O. X, come on, X. You can do it. Oh, good work, X. Wow, you really won that one.",
        "tokens": [
          50364,
          639,
          307,
          411,
          11,
          1783,
          1582,
          13,
          9694,
          11,
          1783,
          13,
          1783,
          11,
          422,
          13,
          1783,
          11,
          808,
          322,
          11,
          1783,
          13,
          509,
          393,
          360,
          309,
          13,
          876,
          11,
          665,
          589,
          11,
          1783,
          13,
          3153,
          11,
          291,
          534,
          1582,
          300,
          472,
          13,
          51314
        ]
      },
      {
        "avg_logprob": -0.20786981324891787,
        "compression_ratio": 1.3630952380952381,
        "end": 1358.2,
        "id": 112,
        "no_speech_prob": 0.1112261638045311,
        "seek": 133320,
        "start": 1352.2,
        "temperature": 0,
        "text": " All right, thanks for watching this coding challenge where I made an AI play tic-tac-toe against itself.",
        "tokens": [
          51314,
          1057,
          558,
          11,
          3231,
          337,
          1976,
          341,
          17720,
          3430,
          689,
          286,
          1027,
          364,
          7318,
          862,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          1970,
          2564,
          13,
          51614
        ]
      },
      {
        "avg_logprob": -0.21769960349965317,
        "compression_ratio": 1.6580882352941178,
        "end": 1365.2,
        "id": 113,
        "no_speech_prob": 0.5154958963394165,
        "seek": 135820,
        "start": 1358.2,
        "temperature": 0,
        "text": " You can see how well it's learning. X just keeps winning over and over again. I will come back in a future second part to this.",
        "tokens": [
          50364,
          509,
          393,
          536,
          577,
          731,
          309,
          311,
          2539,
          13,
          1783,
          445,
          5965,
          8224,
          670,
          293,
          670,
          797,
          13,
          286,
          486,
          808,
          646,
          294,
          257,
          2027,
          1150,
          644,
          281,
          341,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.21769960349965317,
        "compression_ratio": 1.6580882352941178,
        "end": 1370.2,
        "id": 114,
        "no_speech_prob": 0.5154958963394165,
        "seek": 135820,
        "start": 1365.2,
        "temperature": 0,
        "text": " I know I say this for like so many coding challenges and you think I'm never coming back. It'll be sometime in the next several years.",
        "tokens": [
          50714,
          286,
          458,
          286,
          584,
          341,
          337,
          411,
          370,
          867,
          17720,
          4759,
          293,
          291,
          519,
          286,
          478,
          1128,
          1348,
          646,
          13,
          467,
          603,
          312,
          15053,
          294,
          264,
          958,
          2940,
          924,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.21769960349965317,
        "compression_ratio": 1.6580882352941178,
        "end": 1385.2,
        "id": 115,
        "no_speech_prob": 0.5154958963394165,
        "seek": 135820,
        "start": 1370.2,
        "temperature": 0,
        "text": " I will come back and fix this up a little bit as well as implement something called the minimax algorithm to actually make thoughtful, smart decisions for how to place your Xs and your Os.",
        "tokens": [
          50964,
          286,
          486,
          808,
          646,
          293,
          3191,
          341,
          493,
          257,
          707,
          857,
          382,
          731,
          382,
          4445,
          746,
          1219,
          264,
          4464,
          2797,
          9284,
          281,
          767,
          652,
          21566,
          11,
          4069,
          5327,
          337,
          577,
          281,
          1081,
          428,
          1783,
          82,
          293,
          428,
          8875,
          13,
          51714
        ]
      },
      {
        "avg_logprob": -0.16626616447202622,
        "compression_ratio": 1.553921568627451,
        "end": 1390.2,
        "id": 116,
        "no_speech_prob": 0.2974356710910797,
        "seek": 138520,
        "start": 1385.2,
        "temperature": 0,
        "text": " For an AI to learn how to beat this game and to always win tic-tac-toe.",
        "tokens": [
          50364,
          1171,
          364,
          7318,
          281,
          1466,
          577,
          281,
          4224,
          341,
          1216,
          293,
          281,
          1009,
          1942,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          13,
          50614
        ]
      },
      {
        "avg_logprob": -0.16626616447202622,
        "compression_ratio": 1.553921568627451,
        "end": 1402.2,
        "id": 117,
        "no_speech_prob": 0.2974356710910797,
        "seek": 138520,
        "start": 1390.2,
        "temperature": 0,
        "text": " And as a challenge to you, the viewer, take this version of my tic-tac-toe coding challenge and when X or O wins, draw a nice little line through it to indicate the winning.",
        "tokens": [
          50614,
          400,
          382,
          257,
          3430,
          281,
          291,
          11,
          264,
          16767,
          11,
          747,
          341,
          3037,
          295,
          452,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          17720,
          3430,
          293,
          562,
          1783,
          420,
          422,
          10641,
          11,
          2642,
          257,
          1481,
          707,
          1622,
          807,
          309,
          281,
          13330,
          264,
          8224,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.16626616447202622,
        "compression_ratio": 1.553921568627451,
        "end": 1404.2,
        "id": 118,
        "no_speech_prob": 0.2974356710910797,
        "seek": 138520,
        "start": 1402.2,
        "temperature": 0,
        "text": " I don't have time for that right now. I should really add this to this.",
        "tokens": [
          51214,
          286,
          500,
          380,
          362,
          565,
          337,
          300,
          558,
          586,
          13,
          286,
          820,
          534,
          909,
          341,
          281,
          341,
          13,
          51314
        ]
      },
      {
        "avg_logprob": -0.2233714490833849,
        "compression_ratio": 1.7590361445783131,
        "end": 1420.2,
        "id": 119,
        "no_speech_prob": 0.3344988226890564,
        "seek": 140420,
        "start": 1404.2,
        "temperature": 0,
        "text": " But please add this to this. Go to the Coding Train website where you will find this challenge on the website itself and a place to add your community contribution as well as a video tutorial about how to add your community contribution is out now as well.",
        "tokens": [
          50364,
          583,
          1767,
          909,
          341,
          281,
          341,
          13,
          1037,
          281,
          264,
          383,
          8616,
          28029,
          3144,
          689,
          291,
          486,
          915,
          341,
          3430,
          322,
          264,
          3144,
          2564,
          293,
          257,
          1081,
          281,
          909,
          428,
          1768,
          13150,
          382,
          731,
          382,
          257,
          960,
          7073,
          466,
          577,
          281,
          909,
          428,
          1768,
          13150,
          307,
          484,
          586,
          382,
          731,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.2233714490833849,
        "compression_ratio": 1.7590361445783131,
        "end": 1430.2,
        "id": 120,
        "no_speech_prob": 0.3344988226890564,
        "seek": 140420,
        "start": 1420.2,
        "temperature": 0,
        "text": " So I hope to see lots of tic-tac-toe games and computers playing them, people playing them and have a lot of fun making those and I'll see you in a future coding challenge. Goodbye.",
        "tokens": [
          51164,
          407,
          286,
          1454,
          281,
          536,
          3195,
          295,
          256,
          299,
          12,
          83,
          326,
          12,
          1353,
          68,
          2813,
          293,
          10807,
          2433,
          552,
          11,
          561,
          2433,
          552,
          293,
          362,
          257,
          688,
          295,
          1019,
          1455,
          729,
          293,
          286,
          603,
          536,
          291,
          294,
          257,
          2027,
          17720,
          3430,
          13,
          15528,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.7903246879577637,
        "compression_ratio": 0.1111111111111111,
        "end": 1440.2,
        "id": 121,
        "no_speech_prob": 0.9943211078643799,
        "seek": 143420,
        "start": 1434.2,
        "temperature": 0,
        "text": ".",
        "tokens": [
          50364,
          2411,
          50664
        ]
      }
    ],
    "transcription": " Hello and welcome to a coding challenge tic-tac-toe. I'm gonna make tic-tac-toe. I'm hoping when you look at how long this video is it's very short because I don't have a lot of time right now. So I'm gonna try to make a very beginner-friendly example of the game tic-tac-toe without any bells and whistles, without a lot of fancy code. I'm not gonna over-engineer it. I will come back and... I will refactor it later because the reason why I'm making this is I eventually want to show you some different algorithms for an AI or at least a bot to play the game tic-tac-toe. But that's not happening in this video. I'm gonna make the most basic, simple, friendly version of tic-tac-toe right here using JavaScript, the p5.js library, and the p5 web editor. Follow along if you wish and see what happens. I have not practiced or planned for this at all. Alright, I need a board. So I definitely need a board. I'm gonna say let board and I'm gonna just... it's gonna be an array and maybe it'll be an array of arrays. And let's use strings. It's probably a terrible idea. So this will be the top row. This will be the middle row. Right? Tic-tac-toe is 3 by 3 by 3. And then I need two players. So player 1 is an X and player 2 is an O. So now I need to render the board. Let's put some like stuff in it. Let's just pretend it has some stuff. So I want to render the board. I mean I could use this with DOM. There's so many ways I could do this. I'm just gonna do this with canvas and in the draw loop. So I'm gonna say for let i equal 0, i is less than 3, i plus plus. For let j equal 0, j is less than 3, j plus plus. So this is pretty tricky. If you're a beginner programmer, this is a nested loop. And I've actually made this a grid. So every spot in this grid... and let me actually fill it out. Just so we see something here. I'm gonna pretend this has just been played. Right? So the idea is that this two-dimensional array structure, this list of lists, is storing all the information for what the current state of each cell in the tic-tac-toe grid is. At the beginning they're all blank and then as the players play, X's and O's get filled in. So now I'm gonna nested loop through check every column, check every row, and render something. So I could just use the text function. Right? I could say let spot equal the board index i index j. And then I could say text that spot at x comma y. So where is x and y? So I need a width. Like I need... I'm gonna fill the whole canvas. So width equals the width of the canvas divided by 3. And height equals the height of the canvas divided by 3. It would make sense for me to like have players in an array and maybe I could... I could have 3. It doesn't have to be a hard-coded number because I could make like a 5 by 5 tic-tac-toe board. But I mean I'm doing this in the simplest way possible. So x equals width times i. And y equals height times i. And then... And let's run this. What's gonna happen? Do you see anything? Some X's and O's. They're sort of in there. And then I'm going to say text size 32 to make it bigger. Why are they all on top of each other like that? Oh! Oh! I forgot j here. There we go. Look! There's my tic-tac-toe board. But things are kind of like off. Oh! Because of the way... You know what? I should just draw it as a circle. Let's just say if spot... Let's do this. If spot equals player 1, right? Then draw an ellipse at x comma y width width, right? And then otherwise if spot equals player 2, then draw a line from x y to x plus w x plus h. And another line from x plus w y to x y plus h. So that's me drawing a... An x. Whoa! That looks totally wrong. So first of all, let me say no fill. And the offset should be plus w divided by 2. So I need to offset all those spots. Oh! And then this would be... Oh no no no no no no no no no no no no. Oh my god! Help! Let's diagram this. I have a 3 by 3 board, right? This is kind of x equals 0. This is x equals 1. This is x equals 2. This is y equals 0. This is y equals 1. This is y equals 2. So an x should be drawn from here from x y x y to x plus h y plus h. The x I did correctly. Let's go back to here and comment out the ellipse. And let's make the board all full of x's. Let's just make the top row all full of x's. Oh my goodness. Everybody, I just lost like 45 minutes. Not really that long by accident because I had an x here. This needs to be y. Okay, so now we can see the x's. Let's draw the grid. We can see the x's. Well those are really giant x's. Now let's put the circles back in. Ah, the circles need to be, I need to say ellipse mode corner. There we go. Oh boy. So the x's are all kind of connected in a way that looks weird. So actually it wouldn't make sense to not draw everything relative to the corners but to draw everything relative to the centers. And I could have just used text align and gone back with the letters. But I want to draw it. I want to draw it. So I'm going to draw everything relative to the center. You'll see. This is going to improve it. Boy this is a great, this is really going super well so far. So what I'm going to do is say each x is the, it's index into it's column and row times the width plus width divided by 2 plus height divided by 2. That offsets everything by half. And then I'm actually going to say the size, I'm going to have something called the, I'll call this the x size. I'm going to have this equal to w divided by 2. Half of that. And then I'm going to say x minus x size. Y minus x size to x plus x size comma, let's just call this xr. Like kind of like the x's radius. And then this one will be plus xr to y minus xr and then to x minus xr to y plus xr. And then width divided by 4. There we go! There's my x's. And let's make the stroke weight 4. There's my x's. And now the o's, no more ellipse mode. And let's make this w divided by 4 or divided by 2. There we go! Look! So now this is what the tic-tac-toe board looks like. Yeah, I like the way it looks better now. That was painful. So now let's set it up as blank. Oh, and by the way, I've reversed my x's and y's. So this should actually be the x's should be j and the y's should be i. Or actually let's just do it the other way around. Let's keep x's i and y's j but do the j loop as the outer loop and the i loop as the inner loop. There we go. Okay. So now what I want to do next is play the game. So let's have a variable called currentPlayer and currentPlayer is equal to player1. Let's randomly pick between player1 and player2. So every time we start the game, the currentPlayer... and let's actually make these players equal... let's make this an array. I like the idea of making this an array for some reason. And let's have the currentPlayer be players index 0 or the currentPlayer is players index 1. And then this... we can make 1 is a circle and... sorry, 0 is a circle. 0 is the x. I did it right. 0 is the x. Index 1 is the circle. What's going on here? Where's my error? Line 44. Too many brackets, huh? Oh, I need a closing bracket for setup. Okay. Come back, board. And let's make the background 255. Oh, this is very silly because I can say... the whole reason for me doing that is I can... in p5, I can say currentPlayer equals randomPlayers. So this will pick a random player. I really need to see those lines. So let's draw the lines. Let's draw a line from w0 to wHeight. Oh, no, no, no. So to w the whole height. Then we'll draw a line from w times 2. So I just want to draw that crisscross and we'll do the same thing for 0 to width. And this will be h to h. And then h times 2 to h times 2. Now, really what I should do is make this now interactive so that you could click and add the x or the y. I think I might leave that as a little challenge to you. I'm just going to have the computer play the game of tic-tac-toe and see if somebody wins. So either the board will be full and it's a tie or somebody will win. And I won't use any intelligent algorithm. I'm just going to have each player place a random... pick a random spot. So what I'm going to do is I'm also going to make an array called available. So each available spot in the beginning, I'll just say a nest... I'm going to make a nested loop. So much for making me super beginner friendly. So I'm going to say available.push an i and a j. So this is right now every little pair of index values for that grid is available. So each time through draw, let's make a function that's called like next turn. And we'll say spot that I'm picking is a random... I'm going to have to get an index. Index, because I want to remove it, is a... index is a random number that's between 0 and the length of how many things are available. And then the spot is going to take that array available and remove that index value. The splice function will remove it and put it in spot. And then I'm going to say board.spot 0, spot 1. Oh, that's so awkward. But spot is a little array with two values in it, 0 and 1. And so this is not a comma, it's another little bracket. Oh, look how horrible that looks. Let's say... let's do let i equal spot index 0. Let j equal spot index 1. And then I'm in the board i, j. I'm going to say... the player, current player. And then current player should equal... let's just pick a random player. I mean, this is not the right way to do it. But mouse... let's just see if this works. Mouse pressed. Next turn. So every time I click the mouse... current player is not a thing. When I splice it out, does it come in an array? Oh, how awful. It comes in an array, so I need to do that. There we go. There we go, I'm filling up the board. I've done this in such a super awkward way, I might want to rethink this, but it does work. You watching this will make a nicer version of this. But I want to go back and forth between the players. So current player should actually be an index into that array. So I actually want to say random players dot length, because I want that to be an index. Because then when I am adding the thing to the board, I want it to be players index current player, because the next player should be current player plus 1 modulus players dot length. So I built this in a way that you could have more than two players. So it should be OXOXOXOXO. Hey, O won that one. Alright, so this works with my wacky implementation. Now, I don't need mouse press to call next turn. I just want draw to call next turn. So it fills up, but I also want to check for a winner. So what I'm going to do, I'm going to write a function called check winner. And what I'm going to do in check winner is see, first of all, if board dot, if available dot length equals 0, then console dot log tie. So it was a tie. So if the board fills up, it was a tie. But first I need to check, is there a winner? So let winner equal null. So I'm going to say there's a winner. Now what I'm going to do is check all of the, first I'm going to check all of the ways across. So let's first check horizontal. So I is now the row. So if board index I, well that's the, is that the row? I don't remember. 0 equals board index I1 equals board index I2. Then winner equals board index whatever I, whichever one it is. So if all three of those are equal, then the winner is whoever you picked. I can also check, I can check now the columns. I don't remember which is which, but whatever. I'm doing one and the other. Then the winner is, if they're all equal, then I've got a winner. Now I need to check, so this would be vertical, except it might be the other way around. And now I need to check diagonal. So that's easy. I just want to say if board 0, 0 is equal to board 1, 1 is equal to board 2, 2, then the winner is board 0, 0. And then I can also check if board 2, 0 is equal to board 1, 1 is equal to board 0, 2, that would be the other diagonal, then the winner is board 2, 0. And now if there is no, if winner is still null and available is length, console.log tie, otherwise, console.log winner. All right. X is the winner. But if there's a winner, so let result equals check winner. If result is not equal to null, then no loop, stop the looping, console.log result. Why am I getting errors? Oh, OK. Is next turn happening? Next turn has to happen after this. No. Oh! I did something so nuts. Look at this. I was like, that doesn't work. If this equals this equals that. That doesn't work. This is the concept. I'm going to write a function called equals 3, A, B, C. And I'm going to return if A equals B and B equals C and A equals C. So this is really the only way, I mean, there's other ways, but this will actually check if A is equal to B and B is equal to C and A is equal to C. If all of them are equal, then all three of them are equal. So I'm sure people have been screaming at there. So now I can say equals 3 and like this. And then same thing here. So this is checking all the horizontal. This is checking all the vertical. Even I have this mixed up. This is checking the two diagonals. If the winner is null and available, length is zero. We have a tie. Is that redundant? Yes, this is redundant. Yes. Oops, where am I? Am I console logging somewhere else? Oh, I forgot. Oh, I'm not returning the winner. And I'm console logging a lot of other nonsense here. I'm doing a horrible job at this. I am not return. This should be return. I'm rushing. You should never code and rush. Take a deep breath and relax while you're coding. Return tie. Otherwise, return winner. Now, oh, they could be equal. They can't be blank. They can't all be, then somebody wins. They have to be full. So, okay, and A is not equal to blank. There we go. X is the winner. Let's run it again. X is the winner. O is the winner. X is the winner. So, let's at least make a createPx, createP winner style color FFF. Oh, result 32 point. There we go. That's what I'm looking for. Okay, now every time I run it, tie. O, X, O wins. And let's change the frame rate. We're going to make this super dramatic. Frame rate, frame rate one. Okay, here we go, everybody. O, X, O. Where's X going to go? O, X, O, X, O. It was a tie. Oh, no, O won. O won. Congratulations, O. Let's play this one more time. Here we go. X, O. What will happen? Place your bets. This is like, X won. Congratulations, X. X, O. X, come on, X. You can do it. Oh, good work, X. Wow, you really won that one. All right, thanks for watching this coding challenge where I made an AI play tic-tac-toe against itself. You can see how well it's learning. X just keeps winning over and over again. I will come back in a future second part to this. I know I say this for like so many coding challenges and you think I'm never coming back. It'll be sometime in the next several years. I will come back and fix this up a little bit as well as implement something called the minimax algorithm to actually make thoughtful, smart decisions for how to place your Xs and your Os. For an AI to learn how to beat this game and to always win tic-tac-toe. And as a challenge to you, the viewer, take this version of my tic-tac-toe coding challenge and when X or O wins, draw a nice little line through it to indicate the winning. I don't have time for that right now. I should really add this to this. But please add this to this. Go to the Coding Train website where you will find this challenge on the website itself and a place to add your community contribution as well as a video tutorial about how to add your community contribution is out now as well. So I hope to see lots of tic-tac-toe games and computers playing them, people playing them and have a lot of fun making those and I'll see you in a future coding challenge. Goodbye..",
    "translation": null
  },
  "error": null,
  "status": "succeeded",
  "created_at": "2023-09-26T21:03:37.014675Z",
  "started_at": "2023-09-26T21:15:54.223741Z",
  "completed_at": "2023-09-26T21:21:22.149016Z",
  "webhook": "https://83ceaa0b612c.ngrok.app/?video_id=GTWrWM1UsnA",
  "webhook_events_filter": [
    "completed"
  ],
  "metrics": {
    "predict_time": 327.925275
  },
  "urls": {
    "cancel": "https://api.replicate.com/v1/predictions/rao5o2rbl4urlen25sz2mdeim4/cancel",
    "get": "https://api.replicate.com/v1/predictions/rao5o2rbl4urlen25sz2mdeim4"
  }
}