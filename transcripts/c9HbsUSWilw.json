{
  "id": "h3cy4kzbbzxqfwjepvgfho6ici",
  "version": "91ee9c0c3df30478510ff8c8a3a545add1ad0259ad3a9f78fba57fbc05ee64f7",
  "input": {
    "audio": "https://upcdn.io/FW25b4F/raw/coding-train/c9HbsUSWilw.m4a"
  },
  "logs": "Transcribe with large-v2 model\nDetected language: English\n  0%|          | 0/82128 [00:00<?, ?frames/s]\n  3%|▎         | 2400/82128 [00:05<03:17, 402.87frames/s]\n  5%|▍         | 3900/82128 [00:09<03:18, 394.64frames/s]\n  6%|▋         | 5300/82128 [00:13<03:14, 395.79frames/s]\n  9%|▉         | 7300/82128 [00:17<02:50, 439.90frames/s]\n 11%|█▏        | 9300/82128 [00:21<02:48, 433.25frames/s]\n 15%|█▍        | 12000/82128 [00:27<02:33, 457.88frames/s]\n 18%|█▊        | 14400/82128 [00:33<02:35, 436.49frames/s]\n 21%|██        | 17200/82128 [00:38<02:13, 485.69frames/s]\n 24%|██▎       | 19400/82128 [00:44<02:21, 442.72frames/s]\n 26%|██▌       | 21400/82128 [00:49<02:25, 416.77frames/s]\n 29%|██▉       | 23700/82128 [00:56<02:30, 387.99frames/s]\n 32%|███▏      | 26000/82128 [01:02<02:24, 389.11frames/s]\n 34%|███▍      | 28300/82128 [01:06<02:06, 425.09frames/s]\n 38%|███▊      | 30800/82128 [01:11<01:53, 451.53frames/s]\n 41%|████      | 33600/82128 [01:18<01:53, 426.57frames/s]\n 44%|████▍     | 36200/82128 [01:25<01:53, 405.18frames/s]\n 47%|████▋     | 38900/82128 [01:33<01:52, 383.98frames/s]\n 50%|█████     | 41300/82128 [01:38<01:38, 414.79frames/s]\n 53%|█████▎    | 43900/82128 [01:43<01:28, 432.56frames/s]\n 56%|█████▋    | 46400/82128 [01:50<01:25, 418.63frames/s]\n 56%|█████▋    | 46400/82128 [02:05<01:25, 418.63frames/s]\n 60%|██████    | 49300/82128 [02:05<01:50, 297.24frames/s]\n 63%|██████▎   | 52100/82128 [02:13<01:36, 310.26frames/s]\n 66%|██████▋   | 54600/82128 [02:18<01:17, 353.46frames/s]\n 70%|██████▉   | 57400/82128 [02:24<01:05, 379.30frames/s]\n 73%|███████▎  | 60100/82128 [02:32<01:00, 366.13frames/s]\n 77%|███████▋  | 63000/82128 [02:40<00:52, 362.21frames/s]\n 80%|███████▉  | 65600/82128 [02:47<00:45, 362.98frames/s]\n 83%|████████▎ | 67900/82128 [02:54<00:39, 359.79frames/s]\n 86%|████████▌ | 70800/82128 [03:01<00:30, 373.40frames/s]\n 88%|████████▊ | 72600/82128 [03:06<00:26, 364.06frames/s]\n 92%|█████████▏| 75400/82128 [03:12<00:16, 396.02frames/s]\n 95%|█████████▍| 78000/82128 [03:17<00:09, 424.22frames/s]\n 99%|█████████▊| 80900/82128 [03:23<00:02, 449.10frames/s]\n100%|██████████| 82128/82128 [03:25<00:00, 483.39frames/s]\n100%|██████████| 82128/82128 [03:25<00:00, 400.29frames/s]\n",
  "output": {
    "detected_language": "english",
    "segments": [
      {
        "avg_logprob": -0.3406162476271726,
        "compression_ratio": 1.5546558704453441,
        "end": 12,
        "id": 0,
        "no_speech_prob": 0.02439558506011963,
        "seek": 0,
        "start": 0,
        "temperature": 0,
        "text": " Hello, welcome to another regular expression video. Can you believe it? Here we are again, again talking about regular expressions. I can't believe it. This is my life, isn't it? Anyway.",
        "tokens": [
          50364,
          2425,
          11,
          2928,
          281,
          1071,
          3890,
          6114,
          960,
          13,
          1664,
          291,
          1697,
          309,
          30,
          1692,
          321,
          366,
          797,
          11,
          797,
          1417,
          466,
          3890,
          15277,
          13,
          286,
          393,
          380,
          1697,
          309,
          13,
          639,
          307,
          452,
          993,
          11,
          1943,
          380,
          309,
          30,
          5684,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.3406162476271726,
        "compression_ratio": 1.5546558704453441,
        "end": 24,
        "id": 1,
        "no_speech_prob": 0.02439558506011963,
        "seek": 0,
        "start": 12,
        "temperature": 0,
        "text": " Okay, so in this video I want to talk about something called capturing groups and back references. Kind of ominous, weird sounding, but they're very powerful, very interesting and you can use them.",
        "tokens": [
          50964,
          1033,
          11,
          370,
          294,
          341,
          960,
          286,
          528,
          281,
          751,
          466,
          746,
          1219,
          23384,
          3935,
          293,
          646,
          15400,
          13,
          9242,
          295,
          46812,
          563,
          11,
          3657,
          24931,
          11,
          457,
          436,
          434,
          588,
          4005,
          11,
          588,
          1880,
          293,
          291,
          393,
          764,
          552,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.26340902501886543,
        "compression_ratio": 1.396341463414634,
        "end": 31,
        "id": 2,
        "no_speech_prob": 0.04885188490152359,
        "seek": 2400,
        "start": 24,
        "temperature": 0,
        "text": " This is really where you start to get into exciting stuff you can do for experimental, strange regular expression poetry stuff.",
        "tokens": [
          50364,
          639,
          307,
          534,
          689,
          291,
          722,
          281,
          483,
          666,
          4670,
          1507,
          291,
          393,
          360,
          337,
          17069,
          11,
          5861,
          3890,
          6114,
          15155,
          1507,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.26340902501886543,
        "compression_ratio": 1.396341463414634,
        "end": 39,
        "id": 3,
        "no_speech_prob": 0.04885188490152359,
        "seek": 2400,
        "start": 31,
        "temperature": 0,
        "text": " Okay, so what do I mean by capturing groups? So let's say, let's go back to the phone number example.",
        "tokens": [
          50714,
          1033,
          11,
          370,
          437,
          360,
          286,
          914,
          538,
          23384,
          3935,
          30,
          407,
          718,
          311,
          584,
          11,
          718,
          311,
          352,
          646,
          281,
          264,
          2593,
          1230,
          1365,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.23536529541015624,
        "compression_ratio": 1.165289256198347,
        "end": 53,
        "id": 4,
        "no_speech_prob": 0.07158467173576355,
        "seek": 3900,
        "start": 39,
        "temperature": 0,
        "text": " So let's say I have these two phone numbers, 212.555.1234 and I have 917 and I'm just going to use the dash here for a second, dash 867-5309.",
        "tokens": [
          50364,
          407,
          718,
          311,
          584,
          286,
          362,
          613,
          732,
          2593,
          3547,
          11,
          568,
          4762,
          13,
          13622,
          20,
          13,
          4762,
          12249,
          293,
          286,
          362,
          1722,
          7773,
          293,
          286,
          478,
          445,
          516,
          281,
          764,
          264,
          8240,
          510,
          337,
          257,
          1150,
          11,
          8240,
          1649,
          22452,
          12,
          20,
          3446,
          24,
          13,
          51064
        ]
      },
      {
        "avg_logprob": -0.19539018110795456,
        "compression_ratio": 1.5714285714285714,
        "end": 73,
        "id": 5,
        "no_speech_prob": 0.030214134603738785,
        "seek": 5300,
        "start": 54,
        "temperature": 0,
        "text": " So let's say ultimately what I want to do is I want to redact these numbers. So I want to still see the area codes, but I want to do a search and replace any phone number and I want them to come out like this.",
        "tokens": [
          50414,
          407,
          718,
          311,
          584,
          6284,
          437,
          286,
          528,
          281,
          360,
          307,
          286,
          528,
          281,
          2182,
          578,
          613,
          3547,
          13,
          407,
          286,
          528,
          281,
          920,
          536,
          264,
          1859,
          14211,
          11,
          457,
          286,
          528,
          281,
          360,
          257,
          3164,
          293,
          7406,
          604,
          2593,
          1230,
          293,
          286,
          528,
          552,
          281,
          808,
          484,
          411,
          341,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.23915727933247885,
        "compression_ratio": 1.78125,
        "end": 84,
        "id": 6,
        "no_speech_prob": 0.06371328979730606,
        "seek": 7300,
        "start": 73,
        "temperature": 0,
        "text": " So what I need to first do as we know is match these phone numbers and the way that I can match these phone numbers, we've done this a bunch of times but I'll write it over here.",
        "tokens": [
          50364,
          407,
          437,
          286,
          643,
          281,
          700,
          360,
          382,
          321,
          458,
          307,
          2995,
          613,
          2593,
          3547,
          293,
          264,
          636,
          300,
          286,
          393,
          2995,
          613,
          2593,
          3547,
          11,
          321,
          600,
          1096,
          341,
          257,
          3840,
          295,
          1413,
          457,
          286,
          603,
          2464,
          309,
          670,
          510,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.23915727933247885,
        "compression_ratio": 1.78125,
        "end": 93,
        "id": 7,
        "no_speech_prob": 0.06371328979730606,
        "seek": 7300,
        "start": 84,
        "temperature": 0,
        "text": " D, three digits followed by a dash, followed by three digits, followed by a dash, followed by four digits.",
        "tokens": [
          50914,
          413,
          11,
          1045,
          27011,
          6263,
          538,
          257,
          8240,
          11,
          6263,
          538,
          1045,
          27011,
          11,
          6263,
          538,
          257,
          8240,
          11,
          6263,
          538,
          1451,
          27011,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.24115009072386187,
        "compression_ratio": 1.5656108597285068,
        "end": 105,
        "id": 8,
        "no_speech_prob": 0.02517828345298767,
        "seek": 9300,
        "start": 93,
        "temperature": 0,
        "text": " Okay, so here's the thing. Whenever you do a regular expression search, it matches a particular, it doesn't match, right? This is the whole thing that is matched.",
        "tokens": [
          50364,
          1033,
          11,
          370,
          510,
          311,
          264,
          551,
          13,
          14159,
          291,
          360,
          257,
          3890,
          6114,
          3164,
          11,
          309,
          10676,
          257,
          1729,
          11,
          309,
          1177,
          380,
          2995,
          11,
          558,
          30,
          639,
          307,
          264,
          1379,
          551,
          300,
          307,
          21447,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.24115009072386187,
        "compression_ratio": 1.5656108597285068,
        "end": 120,
        "id": 9,
        "no_speech_prob": 0.02517828345298767,
        "seek": 9300,
        "start": 105,
        "temperature": 0,
        "text": " And I'm going to erase the second one just to give myself some more room here. And then what it automatically does is it assigns this full match to something called group number zero.",
        "tokens": [
          50964,
          400,
          286,
          478,
          516,
          281,
          23525,
          264,
          1150,
          472,
          445,
          281,
          976,
          2059,
          512,
          544,
          1808,
          510,
          13,
          400,
          550,
          437,
          309,
          6772,
          775,
          307,
          309,
          6269,
          82,
          341,
          1577,
          2995,
          281,
          746,
          1219,
          1594,
          1230,
          4018,
          13,
          51714
        ]
      },
      {
        "avg_logprob": -0.2357352539733216,
        "compression_ratio": 1.7777777777777777,
        "end": 127,
        "id": 10,
        "no_speech_prob": 0.011868984438478947,
        "seek": 12000,
        "start": 121,
        "temperature": 0,
        "text": " So I have captured this match from my regular expression and I've called it group number zero.",
        "tokens": [
          50414,
          407,
          286,
          362,
          11828,
          341,
          2995,
          490,
          452,
          3890,
          6114,
          293,
          286,
          600,
          1219,
          309,
          1594,
          1230,
          4018,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.2357352539733216,
        "compression_ratio": 1.7777777777777777,
        "end": 138,
        "id": 11,
        "no_speech_prob": 0.011868984438478947,
        "seek": 12000,
        "start": 127,
        "temperature": 0,
        "text": " If I put parentheses, so parentheses can be used for alternation doing an or, but parentheses whether or not they're used for alternation or not also will capture a subgroup.",
        "tokens": [
          50714,
          759,
          286,
          829,
          34153,
          11,
          370,
          34153,
          393,
          312,
          1143,
          337,
          5400,
          399,
          884,
          364,
          420,
          11,
          457,
          34153,
          1968,
          420,
          406,
          436,
          434,
          1143,
          337,
          5400,
          399,
          420,
          406,
          611,
          486,
          7983,
          257,
          1422,
          17377,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.2357352539733216,
        "compression_ratio": 1.7777777777777777,
        "end": 144,
        "id": 12,
        "no_speech_prob": 0.011868984438478947,
        "seek": 12000,
        "start": 138,
        "temperature": 0,
        "text": " So in other words, what if I put an open parentheses here and obviously I'm making this very extreme and a close parentheses here.",
        "tokens": [
          51264,
          407,
          294,
          661,
          2283,
          11,
          437,
          498,
          286,
          829,
          364,
          1269,
          34153,
          510,
          293,
          2745,
          286,
          478,
          1455,
          341,
          588,
          8084,
          293,
          257,
          1998,
          34153,
          510,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.2291001582491225,
        "compression_ratio": 1.5654761904761905,
        "end": 153,
        "id": 13,
        "no_speech_prob": 0.021615013480186462,
        "seek": 14400,
        "start": 145,
        "temperature": 0,
        "text": " What that means is this part of the full match should be captured separately or additionally as a different group.",
        "tokens": [
          50414,
          708,
          300,
          1355,
          307,
          341,
          644,
          295,
          264,
          1577,
          2995,
          820,
          312,
          11828,
          14759,
          420,
          43181,
          382,
          257,
          819,
          1594,
          13,
          50814
        ]
      },
      {
        "avg_logprob": -0.2291001582491225,
        "compression_ratio": 1.5654761904761905,
        "end": 158,
        "id": 14,
        "no_speech_prob": 0.021615013480186462,
        "seek": 14400,
        "start": 153,
        "temperature": 0,
        "text": " And this now is group number one.",
        "tokens": [
          50814,
          400,
          341,
          586,
          307,
          1594,
          1230,
          472,
          13,
          51064
        ]
      },
      {
        "avg_logprob": -0.2291001582491225,
        "compression_ratio": 1.5654761904761905,
        "end": 168,
        "id": 15,
        "no_speech_prob": 0.021615013480186462,
        "seek": 14400,
        "start": 158,
        "temperature": 0,
        "text": " And what if I do this? Over here, this group now is group number two.",
        "tokens": [
          51064,
          400,
          437,
          498,
          286,
          360,
          341,
          30,
          4886,
          510,
          11,
          341,
          1594,
          586,
          307,
          1594,
          1230,
          732,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.2291001582491225,
        "compression_ratio": 1.5654761904761905,
        "end": 172,
        "id": 16,
        "no_speech_prob": 0.021615013480186462,
        "seek": 14400,
        "start": 168,
        "temperature": 0,
        "text": " And I'm running out of room here. Group two.",
        "tokens": [
          51564,
          400,
          286,
          478,
          2614,
          484,
          295,
          1808,
          510,
          13,
          10500,
          732,
          13,
          51764
        ]
      },
      {
        "avg_logprob": -0.2557062996758355,
        "compression_ratio": 1.786046511627907,
        "end": 180,
        "id": 17,
        "no_speech_prob": 0.03114217147231102,
        "seek": 17200,
        "start": 172,
        "temperature": 0,
        "text": " So behind the scenes, the regular expression has done this match and stored in the computer's memory three separate strings.",
        "tokens": [
          50364,
          407,
          2261,
          264,
          8026,
          11,
          264,
          3890,
          6114,
          575,
          1096,
          341,
          2995,
          293,
          12187,
          294,
          264,
          3820,
          311,
          4675,
          1045,
          4994,
          13985,
          13,
          50764
        ]
      },
      {
        "avg_logprob": -0.2557062996758355,
        "compression_ratio": 1.786046511627907,
        "end": 188,
        "id": 18,
        "no_speech_prob": 0.03114217147231102,
        "seek": 17200,
        "start": 180,
        "temperature": 0,
        "text": " The full match is group zero. The first, you know, from left to right, the first submatch captured parentheses as group one.",
        "tokens": [
          50764,
          440,
          1577,
          2995,
          307,
          1594,
          4018,
          13,
          440,
          700,
          11,
          291,
          458,
          11,
          490,
          1411,
          281,
          558,
          11,
          264,
          700,
          1422,
          76,
          852,
          11828,
          34153,
          382,
          1594,
          472,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.2557062996758355,
        "compression_ratio": 1.786046511627907,
        "end": 194,
        "id": 19,
        "no_speech_prob": 0.03114217147231102,
        "seek": 17200,
        "start": 188,
        "temperature": 0,
        "text": " The second submatch captured parentheses as group two. I don't know why I put dot, those are dotted lines. Those are full parentheses.",
        "tokens": [
          51164,
          440,
          1150,
          1422,
          76,
          852,
          11828,
          34153,
          382,
          1594,
          732,
          13,
          286,
          500,
          380,
          458,
          983,
          286,
          829,
          5893,
          11,
          729,
          366,
          37459,
          3876,
          13,
          3950,
          366,
          1577,
          34153,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.20606759153766396,
        "compression_ratio": 1.6700507614213198,
        "end": 202,
        "id": 20,
        "no_speech_prob": 0.4377470314502716,
        "seek": 19400,
        "start": 194,
        "temperature": 0,
        "text": " So this is very powerful. Why? Because what I can do is in different ways I can refer to those groups whenever I want to.",
        "tokens": [
          50364,
          407,
          341,
          307,
          588,
          4005,
          13,
          1545,
          30,
          1436,
          437,
          286,
          393,
          360,
          307,
          294,
          819,
          2098,
          286,
          393,
          2864,
          281,
          729,
          3935,
          5699,
          286,
          528,
          281,
          13,
          50764
        ]
      },
      {
        "avg_logprob": -0.20606759153766396,
        "compression_ratio": 1.6700507614213198,
        "end": 212,
        "id": 21,
        "no_speech_prob": 0.4377470314502716,
        "seek": 19400,
        "start": 202,
        "temperature": 0,
        "text": " And there's two ways of referring to those groups. For example, dollar sign one refers to group number one, but also backslash one can refer to group number one.",
        "tokens": [
          50764,
          400,
          456,
          311,
          732,
          2098,
          295,
          13761,
          281,
          729,
          3935,
          13,
          1171,
          1365,
          11,
          7241,
          1465,
          472,
          14942,
          281,
          1594,
          1230,
          472,
          11,
          457,
          611,
          646,
          10418,
          1299,
          472,
          393,
          2864,
          281,
          1594,
          1230,
          472,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.20606759153766396,
        "compression_ratio": 1.6700507614213198,
        "end": 214,
        "id": 22,
        "no_speech_prob": 0.4377470314502716,
        "seek": 19400,
        "start": 212,
        "temperature": 0,
        "text": " And these are being used in different places.",
        "tokens": [
          51264,
          400,
          613,
          366,
          885,
          1143,
          294,
          819,
          3190,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.20774440765380858,
        "compression_ratio": 1.6974789915966386,
        "end": 220,
        "id": 23,
        "no_speech_prob": 0.43769848346710205,
        "seek": 21400,
        "start": 214,
        "temperature": 0,
        "text": " So the dollar sign is used whenever you're doing a replace and you want to refer to a captured group.",
        "tokens": [
          50364,
          407,
          264,
          7241,
          1465,
          307,
          1143,
          5699,
          291,
          434,
          884,
          257,
          7406,
          293,
          291,
          528,
          281,
          2864,
          281,
          257,
          11828,
          1594,
          13,
          50664
        ]
      },
      {
        "avg_logprob": -0.20774440765380858,
        "compression_ratio": 1.6974789915966386,
        "end": 228,
        "id": 24,
        "no_speech_prob": 0.43769848346710205,
        "seek": 21400,
        "start": 220,
        "temperature": 0,
        "text": " And backslash one is when you're doing a, when you're within the regular expression itself referring to a captured group.",
        "tokens": [
          50664,
          400,
          646,
          10418,
          1299,
          472,
          307,
          562,
          291,
          434,
          884,
          257,
          11,
          562,
          291,
          434,
          1951,
          264,
          3890,
          6114,
          2564,
          13761,
          281,
          257,
          11828,
          1594,
          13,
          51064
        ]
      },
      {
        "avg_logprob": -0.20774440765380858,
        "compression_ratio": 1.6974789915966386,
        "end": 232,
        "id": 25,
        "no_speech_prob": 0.43769848346710205,
        "seek": 21400,
        "start": 228,
        "temperature": 0,
        "text": " So I'm now going to show you two scenarios where each of these is used.",
        "tokens": [
          51064,
          407,
          286,
          478,
          586,
          516,
          281,
          855,
          291,
          732,
          15077,
          689,
          1184,
          295,
          613,
          307,
          1143,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.20774440765380858,
        "compression_ratio": 1.6974789915966386,
        "end": 237,
        "id": 26,
        "no_speech_prob": 0.43769848346710205,
        "seek": 21400,
        "start": 232,
        "temperature": 0,
        "text": " Okay? So hopefully this makes some sense to you, but it'll make more sense once I actually play it out here.",
        "tokens": [
          51264,
          1033,
          30,
          407,
          4696,
          341,
          1669,
          512,
          2020,
          281,
          291,
          11,
          457,
          309,
          603,
          652,
          544,
          2020,
          1564,
          286,
          767,
          862,
          309,
          484,
          510,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.23396516120296784,
        "compression_ratio": 1.6199095022624435,
        "end": 244,
        "id": 27,
        "no_speech_prob": 0.26281866431236267,
        "seek": 23700,
        "start": 237,
        "temperature": 0,
        "text": " So the first scenario is, let's again, apologize for this, let's again write the regular expression to match all three of these phone numbers.",
        "tokens": [
          50364,
          407,
          264,
          700,
          9005,
          307,
          11,
          718,
          311,
          797,
          11,
          12328,
          337,
          341,
          11,
          718,
          311,
          797,
          2464,
          264,
          3890,
          6114,
          281,
          2995,
          439,
          1045,
          295,
          613,
          2593,
          3547,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.23396516120296784,
        "compression_ratio": 1.6199095022624435,
        "end": 248,
        "id": 28,
        "no_speech_prob": 0.26281866431236267,
        "seek": 23700,
        "start": 244,
        "temperature": 0,
        "text": " And if you recall, actually I can probably scroll up and find it, never mind.",
        "tokens": [
          50714,
          400,
          498,
          291,
          9901,
          11,
          767,
          286,
          393,
          1391,
          11369,
          493,
          293,
          915,
          309,
          11,
          1128,
          1575,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.23396516120296784,
        "compression_ratio": 1.6199095022624435,
        "end": 260,
        "id": 29,
        "no_speech_prob": 0.26281866431236267,
        "seek": 23700,
        "start": 248,
        "temperature": 0,
        "text": " I can say I want to have what? An optional open parentheses followed by three digits, followed by a dot, a dash, or a closed parentheses.",
        "tokens": [
          50914,
          286,
          393,
          584,
          286,
          528,
          281,
          362,
          437,
          30,
          1107,
          17312,
          1269,
          34153,
          6263,
          538,
          1045,
          27011,
          11,
          6263,
          538,
          257,
          5893,
          11,
          257,
          8240,
          11,
          420,
          257,
          5395,
          34153,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.3249115174816501,
        "compression_ratio": 1.5255474452554745,
        "end": 276,
        "id": 30,
        "no_speech_prob": 0.1688476949930191,
        "seek": 26000,
        "start": 261,
        "temperature": 0,
        "text": " Followed by, whoops, what did I miss here? Range out of order. Oh, the dash has to be first when the character is last.",
        "tokens": [
          50414,
          9876,
          292,
          538,
          11,
          567,
          3370,
          11,
          437,
          630,
          286,
          1713,
          510,
          30,
          33778,
          484,
          295,
          1668,
          13,
          876,
          11,
          264,
          8240,
          575,
          281,
          312,
          700,
          562,
          264,
          2517,
          307,
          1036,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.3249115174816501,
        "compression_ratio": 1.5255474452554745,
        "end": 283,
        "id": 31,
        "no_speech_prob": 0.1688476949930191,
        "seek": 26000,
        "start": 276,
        "temperature": 0,
        "text": " Followed by three digits, followed by again a dot, a dash or a dot, dash has to be first.",
        "tokens": [
          51164,
          9876,
          292,
          538,
          1045,
          27011,
          11,
          6263,
          538,
          797,
          257,
          5893,
          11,
          257,
          8240,
          420,
          257,
          5893,
          11,
          8240,
          575,
          281,
          312,
          700,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.23032335134652945,
        "compression_ratio": 1.719298245614035,
        "end": 290,
        "id": 32,
        "no_speech_prob": 0.129397451877594,
        "seek": 28300,
        "start": 283,
        "temperature": 0,
        "text": " And then followed by four digits. So now, I have now matched all four of these groups.",
        "tokens": [
          50364,
          400,
          550,
          6263,
          538,
          1451,
          27011,
          13,
          407,
          586,
          11,
          286,
          362,
          586,
          21447,
          439,
          1451,
          295,
          613,
          3935,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.23032335134652945,
        "compression_ratio": 1.719298245614035,
        "end": 308,
        "id": 33,
        "no_speech_prob": 0.129397451877594,
        "seek": 28300,
        "start": 290,
        "temperature": 0,
        "text": " So let's say what I want to do is keep only the first number, and then I want to redact the second, only the first three numbers, the area code so to speak, and I want to redact the rest of the phone number.",
        "tokens": [
          50714,
          407,
          718,
          311,
          584,
          437,
          286,
          528,
          281,
          360,
          307,
          1066,
          787,
          264,
          700,
          1230,
          11,
          293,
          550,
          286,
          528,
          281,
          2182,
          578,
          264,
          1150,
          11,
          787,
          264,
          700,
          1045,
          3547,
          11,
          264,
          1859,
          3089,
          370,
          281,
          1710,
          11,
          293,
          286,
          528,
          281,
          2182,
          578,
          264,
          1472,
          295,
          264,
          2593,
          1230,
          13,
          51614
        ]
      },
      {
        "avg_logprob": -0.20299258800821568,
        "compression_ratio": 1.8363636363636364,
        "end": 317,
        "id": 34,
        "no_speech_prob": 0.14414483308792114,
        "seek": 30800,
        "start": 308,
        "temperature": 0,
        "text": " So the way I would do this is let me capture only the area code. So this, by the way, this, these three numbers right there, that's the area code.",
        "tokens": [
          50364,
          407,
          264,
          636,
          286,
          576,
          360,
          341,
          307,
          718,
          385,
          7983,
          787,
          264,
          1859,
          3089,
          13,
          407,
          341,
          11,
          538,
          264,
          636,
          11,
          341,
          11,
          613,
          1045,
          3547,
          558,
          456,
          11,
          300,
          311,
          264,
          1859,
          3089,
          13,
          50814
        ]
      },
      {
        "avg_logprob": -0.20299258800821568,
        "compression_ratio": 1.8363636363636364,
        "end": 320,
        "id": 35,
        "no_speech_prob": 0.14414483308792114,
        "seek": 30800,
        "start": 317,
        "temperature": 0,
        "text": " So what I can actually do is put parentheses around it.",
        "tokens": [
          50814,
          407,
          437,
          286,
          393,
          767,
          360,
          307,
          829,
          34153,
          926,
          309,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.20299258800821568,
        "compression_ratio": 1.8363636363636364,
        "end": 336,
        "id": 36,
        "no_speech_prob": 0.14414483308792114,
        "seek": 30800,
        "start": 320,
        "temperature": 0,
        "text": " And now what I want to do when I do my replace, right, this is the replace, is I want to say, hey, let me replace it with whatever was captured in group one, followed by dash xxx, followed by dash xxx.",
        "tokens": [
          50964,
          400,
          586,
          437,
          286,
          528,
          281,
          360,
          562,
          286,
          360,
          452,
          7406,
          11,
          558,
          11,
          341,
          307,
          264,
          7406,
          11,
          307,
          286,
          528,
          281,
          584,
          11,
          4177,
          11,
          718,
          385,
          7406,
          309,
          365,
          2035,
          390,
          11828,
          294,
          1594,
          472,
          11,
          6263,
          538,
          8240,
          2031,
          30569,
          11,
          6263,
          538,
          8240,
          2031,
          30569,
          13,
          51764
        ]
      },
      {
        "avg_logprob": -0.22024329203479695,
        "compression_ratio": 1.8538812785388128,
        "end": 344,
        "id": 37,
        "no_speech_prob": 0.009859665296971798,
        "seek": 33600,
        "start": 337,
        "temperature": 0,
        "text": " Now, I'm going to, right, so this is saying like use the thing that I captured in the replace.",
        "tokens": [
          50414,
          823,
          11,
          286,
          478,
          516,
          281,
          11,
          558,
          11,
          370,
          341,
          307,
          1566,
          411,
          764,
          264,
          551,
          300,
          286,
          11828,
          294,
          264,
          7406,
          13,
          50764
        ]
      },
      {
        "avg_logprob": -0.22024329203479695,
        "compression_ratio": 1.8538812785388128,
        "end": 355,
        "id": 38,
        "no_speech_prob": 0.009859665296971798,
        "seek": 33600,
        "start": 346,
        "temperature": 0,
        "text": " So let me show you this, and now I'm going to do, I'm going to do a replace, right, replace, look what happened there, replace, look what happened there, replace.",
        "tokens": [
          50864,
          407,
          718,
          385,
          855,
          291,
          341,
          11,
          293,
          586,
          286,
          478,
          516,
          281,
          360,
          11,
          286,
          478,
          516,
          281,
          360,
          257,
          7406,
          11,
          558,
          11,
          7406,
          11,
          574,
          437,
          2011,
          456,
          11,
          7406,
          11,
          574,
          437,
          2011,
          456,
          11,
          7406,
          13,
          51314
        ]
      },
      {
        "avg_logprob": -0.22024329203479695,
        "compression_ratio": 1.8538812785388128,
        "end": 362,
        "id": 39,
        "no_speech_prob": 0.009859665296971798,
        "seek": 33600,
        "start": 355,
        "temperature": 0,
        "text": " Now I lost the original formatting of the regular expression because remember these are a lot of, I don't know why it's, what format it thinks I am.",
        "tokens": [
          51314,
          823,
          286,
          2731,
          264,
          3380,
          39366,
          295,
          264,
          3890,
          6114,
          570,
          1604,
          613,
          366,
          257,
          688,
          295,
          11,
          286,
          500,
          380,
          458,
          983,
          309,
          311,
          11,
          437,
          7877,
          309,
          7309,
          286,
          669,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.21785508728027345,
        "compression_ratio": 1.8754863813229572,
        "end": 369,
        "id": 40,
        "no_speech_prob": 0.02002248726785183,
        "seek": 36200,
        "start": 362,
        "temperature": 0,
        "text": " But remember I'm not, I could, now this could be an exercise, I'm not going to go through this right now because I'll go on for too long.",
        "tokens": [
          50364,
          583,
          1604,
          286,
          478,
          406,
          11,
          286,
          727,
          11,
          586,
          341,
          727,
          312,
          364,
          5380,
          11,
          286,
          478,
          406,
          516,
          281,
          352,
          807,
          341,
          558,
          586,
          570,
          286,
          603,
          352,
          322,
          337,
          886,
          938,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.21785508728027345,
        "compression_ratio": 1.8754863813229572,
        "end": 378,
        "id": 41,
        "no_speech_prob": 0.02002248726785183,
        "seek": 36200,
        "start": 369,
        "temperature": 0,
        "text": " But an exercise you could try to try is can you capture the rest of the formatting of the phone number and then have multiple groups.",
        "tokens": [
          50714,
          583,
          364,
          5380,
          291,
          727,
          853,
          281,
          853,
          307,
          393,
          291,
          7983,
          264,
          1472,
          295,
          264,
          39366,
          295,
          264,
          2593,
          1230,
          293,
          550,
          362,
          3866,
          3935,
          13,
          51164
        ]
      },
      {
        "avg_logprob": -0.21785508728027345,
        "compression_ratio": 1.8754863813229572,
        "end": 389,
        "id": 42,
        "no_speech_prob": 0.02002248726785183,
        "seek": 36200,
        "start": 378,
        "temperature": 0,
        "text": " So it still retains, right, it's, right now I'm not retaining it, all the phone numbers now have this format, but if I undo, right, I want to keep the, I want to keep the dots or the dashes and the parentheses.",
        "tokens": [
          51164,
          407,
          309,
          920,
          1533,
          2315,
          11,
          558,
          11,
          309,
          311,
          11,
          558,
          586,
          286,
          478,
          406,
          34936,
          309,
          11,
          439,
          264,
          2593,
          3547,
          586,
          362,
          341,
          7877,
          11,
          457,
          498,
          286,
          23779,
          11,
          558,
          11,
          286,
          528,
          281,
          1066,
          264,
          11,
          286,
          528,
          281,
          1066,
          264,
          15026,
          420,
          264,
          8240,
          279,
          293,
          264,
          34153,
          13,
          51714
        ]
      },
      {
        "avg_logprob": -0.22014391699502633,
        "compression_ratio": 1.5944700460829493,
        "end": 393,
        "id": 43,
        "no_speech_prob": 0.0004512052400968969,
        "seek": 38900,
        "start": 389,
        "temperature": 0,
        "text": " Try to rewrite the regular expression to do that, very interesting exercise to try to do.",
        "tokens": [
          50364,
          6526,
          281,
          28132,
          264,
          3890,
          6114,
          281,
          360,
          300,
          11,
          588,
          1880,
          5380,
          281,
          853,
          281,
          360,
          13,
          50564
        ]
      },
      {
        "avg_logprob": -0.22014391699502633,
        "compression_ratio": 1.5944700460829493,
        "end": 400,
        "id": 44,
        "no_speech_prob": 0.0004512052400968969,
        "seek": 38900,
        "start": 393,
        "temperature": 0,
        "text": " Okay, let me think of a slightly different scenario, I'll show you this can also be useful, this has happened to me before.",
        "tokens": [
          50564,
          1033,
          11,
          718,
          385,
          519,
          295,
          257,
          4748,
          819,
          9005,
          11,
          286,
          603,
          855,
          291,
          341,
          393,
          611,
          312,
          4420,
          11,
          341,
          575,
          2011,
          281,
          385,
          949,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.22014391699502633,
        "compression_ratio": 1.5944700460829493,
        "end": 413,
        "id": 45,
        "no_speech_prob": 0.0004512052400968969,
        "seek": 38900,
        "start": 400,
        "temperature": 0,
        "text": " I'll show you, let's say I wanted to find and replace, actually I have a first name comma last, list of first names comma last name.",
        "tokens": [
          50914,
          286,
          603,
          855,
          291,
          11,
          718,
          311,
          584,
          286,
          1415,
          281,
          915,
          293,
          7406,
          11,
          767,
          286,
          362,
          257,
          700,
          1315,
          22117,
          1036,
          11,
          1329,
          295,
          700,
          5288,
          22117,
          1036,
          1315,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.24527130504645925,
        "compression_ratio": 1.816425120772947,
        "end": 420,
        "id": 46,
        "no_speech_prob": 0.12084042280912399,
        "seek": 41300,
        "start": 413,
        "temperature": 0,
        "text": " I can't think of any other names.",
        "tokens": [
          50364,
          286,
          393,
          380,
          519,
          295,
          604,
          661,
          5288,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.24527130504645925,
        "compression_ratio": 1.816425120772947,
        "end": 431,
        "id": 47,
        "no_speech_prob": 0.12084042280912399,
        "seek": 41300,
        "start": 420,
        "temperature": 0,
        "text": " Okay, so you can see I have a bunch of names, first name comma last name, oh sorry, last name comma first name and I want to redo this list to just make this list first name comma last name.",
        "tokens": [
          50714,
          1033,
          11,
          370,
          291,
          393,
          536,
          286,
          362,
          257,
          3840,
          295,
          5288,
          11,
          700,
          1315,
          22117,
          1036,
          1315,
          11,
          1954,
          2597,
          11,
          1036,
          1315,
          22117,
          700,
          1315,
          293,
          286,
          528,
          281,
          29956,
          341,
          1329,
          281,
          445,
          652,
          341,
          1329,
          700,
          1315,
          22117,
          1036,
          1315,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.24527130504645925,
        "compression_ratio": 1.816425120772947,
        "end": 439,
        "id": 48,
        "no_speech_prob": 0.12084042280912399,
        "seek": 41300,
        "start": 431,
        "temperature": 0,
        "text": " It's like I have thousands of these, I want to use a regular expression, I don't want to have to sit here and be like cut, paste, space, delete, right.",
        "tokens": [
          51264,
          467,
          311,
          411,
          286,
          362,
          5383,
          295,
          613,
          11,
          286,
          528,
          281,
          764,
          257,
          3890,
          6114,
          11,
          286,
          500,
          380,
          528,
          281,
          362,
          281,
          1394,
          510,
          293,
          312,
          411,
          1723,
          11,
          9163,
          11,
          1901,
          11,
          12097,
          11,
          558,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.2557696065595073,
        "compression_ratio": 2.1475409836065573,
        "end": 445,
        "id": 49,
        "no_speech_prob": 0.2308991253376007,
        "seek": 43900,
        "start": 439,
        "temperature": 0,
        "text": " I could do that for every single line or I could try to make some kind of weird macro that does it automatically, I could do this with a regular expression.",
        "tokens": [
          50364,
          286,
          727,
          360,
          300,
          337,
          633,
          2167,
          1622,
          420,
          286,
          727,
          853,
          281,
          652,
          512,
          733,
          295,
          3657,
          18887,
          300,
          775,
          309,
          6772,
          11,
          286,
          727,
          360,
          341,
          365,
          257,
          3890,
          6114,
          13,
          50664
        ]
      },
      {
        "avg_logprob": -0.2557696065595073,
        "compression_ratio": 2.1475409836065573,
        "end": 449,
        "id": 50,
        "no_speech_prob": 0.2308991253376007,
        "seek": 43900,
        "start": 445,
        "temperature": 0,
        "text": " So I'm going to go down and I'm going to try to write a regular expression.",
        "tokens": [
          50664,
          407,
          286,
          478,
          516,
          281,
          352,
          760,
          293,
          286,
          478,
          516,
          281,
          853,
          281,
          2464,
          257,
          3890,
          6114,
          13,
          50864
        ]
      },
      {
        "avg_logprob": -0.2557696065595073,
        "compression_ratio": 2.1475409836065573,
        "end": 464,
        "id": 51,
        "no_speech_prob": 0.2308991253376007,
        "seek": 43900,
        "start": 449,
        "temperature": 0,
        "text": " What am I trying to match? I'm trying to match any word character, any optionally, any number of word characters followed by a number, followed by one or more whitespace, not followed, sorry, followed by a comma, followed by one or more whitespace, followed by any number of word characters.",
        "tokens": [
          50864,
          708,
          669,
          286,
          1382,
          281,
          2995,
          30,
          286,
          478,
          1382,
          281,
          2995,
          604,
          1349,
          2517,
          11,
          604,
          3614,
          379,
          11,
          604,
          1230,
          295,
          1349,
          4342,
          6263,
          538,
          257,
          1230,
          11,
          6263,
          538,
          472,
          420,
          544,
          21909,
          17940,
          11,
          406,
          6263,
          11,
          2597,
          11,
          6263,
          538,
          257,
          22117,
          11,
          6263,
          538,
          472,
          420,
          544,
          21909,
          17940,
          11,
          6263,
          538,
          604,
          1230,
          295,
          1349,
          4342,
          13,
          51614
        ]
      },
      {
        "avg_logprob": -0.30276359830583843,
        "compression_ratio": 1.8287037037037037,
        "end": 467,
        "id": 52,
        "no_speech_prob": 0.6038673520088196,
        "seek": 46400,
        "start": 464,
        "temperature": 0.2,
        "text": " So I matched these, that looks pretty good.",
        "tokens": [
          50364,
          407,
          286,
          21447,
          613,
          11,
          300,
          1542,
          1238,
          665,
          13,
          50514
        ]
      },
      {
        "avg_logprob": -0.30276359830583843,
        "compression_ratio": 1.8287037037037037,
        "end": 472,
        "id": 53,
        "no_speech_prob": 0.6038673520088196,
        "seek": 46400,
        "start": 467,
        "temperature": 0.2,
        "text": " Now I want to capture the first name and the last name, or the last name and the first name.",
        "tokens": [
          50514,
          823,
          286,
          528,
          281,
          7983,
          264,
          700,
          1315,
          293,
          264,
          1036,
          1315,
          11,
          420,
          264,
          1036,
          1315,
          293,
          264,
          700,
          1315,
          13,
          50764
        ]
      },
      {
        "avg_logprob": -0.30276359830583843,
        "compression_ratio": 1.8287037037037037,
        "end": 478,
        "id": 54,
        "no_speech_prob": 0.6038673520088196,
        "seek": 46400,
        "start": 472,
        "temperature": 0.2,
        "text": " So this is the, oops, ah, oh I lost it.",
        "tokens": [
          50764,
          407,
          341,
          307,
          264,
          11,
          34166,
          11,
          3716,
          11,
          1954,
          286,
          2731,
          309,
          13,
          51064
        ]
      },
      {
        "avg_logprob": -0.30276359830583843,
        "compression_ratio": 1.8287037037037037,
        "end": 481,
        "id": 55,
        "no_speech_prob": 0.6038673520088196,
        "seek": 46400,
        "start": 478,
        "temperature": 0.2,
        "text": " Shoot, this will get edited out, let me write that again.",
        "tokens": [
          51064,
          19760,
          11,
          341,
          486,
          483,
          23016,
          484,
          11,
          718,
          385,
          2464,
          300,
          797,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.30276359830583843,
        "compression_ratio": 1.8287037037037037,
        "end": 485,
        "id": 56,
        "no_speech_prob": 0.6038673520088196,
        "seek": 46400,
        "start": 481,
        "temperature": 0.2,
        "text": " Comma, some amount of whitespace, that, okay.",
        "tokens": [
          51214,
          3046,
          64,
          11,
          512,
          2372,
          295,
          21909,
          17940,
          11,
          300,
          11,
          1392,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.30276359830583843,
        "compression_ratio": 1.8287037037037037,
        "end": 493,
        "id": 57,
        "no_speech_prob": 0.6038673520088196,
        "seek": 46400,
        "start": 485,
        "temperature": 0.2,
        "text": " So I want to capture that last name, right, any sequence of word characters and I want to capture that first name.",
        "tokens": [
          51414,
          407,
          286,
          528,
          281,
          7983,
          300,
          1036,
          1315,
          11,
          558,
          11,
          604,
          8310,
          295,
          1349,
          4342,
          293,
          286,
          528,
          281,
          7983,
          300,
          700,
          1315,
          13,
          51814
        ]
      },
      {
        "avg_logprob": -0.21736264038085937,
        "compression_ratio": 1.8016528925619835,
        "end": 502,
        "id": 58,
        "no_speech_prob": 0.004198730457574129,
        "seek": 49300,
        "start": 493,
        "temperature": 0,
        "text": " So now I've captured those and I want to replace, right, I want to first see the first name, space, the last name.",
        "tokens": [
          50364,
          407,
          586,
          286,
          600,
          11828,
          729,
          293,
          286,
          528,
          281,
          7406,
          11,
          558,
          11,
          286,
          528,
          281,
          700,
          536,
          264,
          700,
          1315,
          11,
          1901,
          11,
          264,
          1036,
          1315,
          13,
          50814
        ]
      },
      {
        "avg_logprob": -0.21736264038085937,
        "compression_ratio": 1.8016528925619835,
        "end": 508,
        "id": 59,
        "no_speech_prob": 0.004198730457574129,
        "seek": 49300,
        "start": 502,
        "temperature": 0,
        "text": " So this, oh, sorry, two comma one, remember group zero is everything.",
        "tokens": [
          50814,
          407,
          341,
          11,
          1954,
          11,
          2597,
          11,
          732,
          22117,
          472,
          11,
          1604,
          1594,
          4018,
          307,
          1203,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.21736264038085937,
        "compression_ratio": 1.8016528925619835,
        "end": 513,
        "id": 60,
        "no_speech_prob": 0.004198730457574129,
        "seek": 49300,
        "start": 508,
        "temperature": 0,
        "text": " So group two is the second group, right, the first name which is last name comma first name.",
        "tokens": [
          51114,
          407,
          1594,
          732,
          307,
          264,
          1150,
          1594,
          11,
          558,
          11,
          264,
          700,
          1315,
          597,
          307,
          1036,
          1315,
          22117,
          700,
          1315,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.21736264038085937,
        "compression_ratio": 1.8016528925619835,
        "end": 518,
        "id": 61,
        "no_speech_prob": 0.004198730457574129,
        "seek": 49300,
        "start": 513,
        "temperature": 0,
        "text": " I want to show that and then the other one, wah, I'm really, I don't know if I'm making any sense here.",
        "tokens": [
          51364,
          286,
          528,
          281,
          855,
          300,
          293,
          550,
          264,
          661,
          472,
          11,
          31979,
          11,
          286,
          478,
          534,
          11,
          286,
          500,
          380,
          458,
          498,
          286,
          478,
          1455,
          604,
          2020,
          510,
          13,
          51614
        ]
      },
      {
        "avg_logprob": -0.21736264038085937,
        "compression_ratio": 1.8016528925619835,
        "end": 521,
        "id": 62,
        "no_speech_prob": 0.004198730457574129,
        "seek": 49300,
        "start": 518,
        "temperature": 0,
        "text": " Okay, now I'm going to do replace all, boom, I did it.",
        "tokens": [
          51614,
          1033,
          11,
          586,
          286,
          478,
          516,
          281,
          360,
          7406,
          439,
          11,
          9351,
          11,
          286,
          630,
          309,
          13,
          51764
        ]
      },
      {
        "avg_logprob": -0.27020818795730817,
        "compression_ratio": 1.5357142857142858,
        "end": 526,
        "id": 63,
        "no_speech_prob": 0.004133915062993765,
        "seek": 52100,
        "start": 521,
        "temperature": 0,
        "text": " So this is the kind of thing that you can really use regular expressions for in kind of find and replace.",
        "tokens": [
          50364,
          407,
          341,
          307,
          264,
          733,
          295,
          551,
          300,
          291,
          393,
          534,
          764,
          3890,
          15277,
          337,
          294,
          733,
          295,
          915,
          293,
          7406,
          13,
          50614
        ]
      },
      {
        "avg_logprob": -0.27020818795730817,
        "compression_ratio": 1.5357142857142858,
        "end": 535,
        "id": 64,
        "no_speech_prob": 0.004133915062993765,
        "seek": 52100,
        "start": 526,
        "temperature": 0,
        "text": " Here's another scenario, I don't know how many of these scenarios are worth going through, but, ah,",
        "tokens": [
          50614,
          1692,
          311,
          1071,
          9005,
          11,
          286,
          500,
          380,
          458,
          577,
          867,
          295,
          613,
          15077,
          366,
          3163,
          516,
          807,
          11,
          457,
          11,
          3716,
          11,
          51064
        ]
      },
      {
        "avg_logprob": -0.27020818795730817,
        "compression_ratio": 1.5357142857142858,
        "end": 546,
        "id": 65,
        "no_speech_prob": 0.004133915062993765,
        "seek": 52100,
        "start": 535,
        "temperature": 0,
        "text": " you know, matching links, like this is markdown, ah,",
        "tokens": [
          51064,
          291,
          458,
          11,
          14324,
          6123,
          11,
          411,
          341,
          307,
          1491,
          5093,
          11,
          3716,
          11,
          51614
        ]
      },
      {
        "avg_logprob": -0.22524850086499287,
        "compression_ratio": 1.6414141414141414,
        "end": 556,
        "id": 66,
        "no_speech_prob": 0.02033173106610775,
        "seek": 54600,
        "start": 546,
        "temperature": 0,
        "text": " right, I'm going to just do this really quick, I'm going to do one more.",
        "tokens": [
          50364,
          558,
          11,
          286,
          478,
          516,
          281,
          445,
          360,
          341,
          534,
          1702,
          11,
          286,
          478,
          516,
          281,
          360,
          472,
          544,
          13,
          50864
        ]
      },
      {
        "avg_logprob": -0.22524850086499287,
        "compression_ratio": 1.6414141414141414,
        "end": 566,
        "id": 67,
        "no_speech_prob": 0.02033173106610775,
        "seek": 54600,
        "start": 556,
        "temperature": 0,
        "text": " What if I want to match, and I guess assuming my syntax is markdown, what if I want to match any link written in this markdown syntax",
        "tokens": [
          50864,
          708,
          498,
          286,
          528,
          281,
          2995,
          11,
          293,
          286,
          2041,
          11926,
          452,
          28431,
          307,
          1491,
          5093,
          11,
          437,
          498,
          286,
          528,
          281,
          2995,
          604,
          2113,
          3720,
          294,
          341,
          1491,
          5093,
          28431,
          51364
        ]
      },
      {
        "avg_logprob": -0.22524850086499287,
        "compression_ratio": 1.6414141414141414,
        "end": 568,
        "id": 68,
        "no_speech_prob": 0.02033173106610775,
        "seek": 54600,
        "start": 566,
        "temperature": 0,
        "text": " and translate it to HTML.",
        "tokens": [
          51364,
          293,
          13799,
          309,
          281,
          17995,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.22524850086499287,
        "compression_ratio": 1.6414141414141414,
        "end": 570,
        "id": 69,
        "no_speech_prob": 0.02033173106610775,
        "seek": 54600,
        "start": 568,
        "temperature": 0,
        "text": " Let's look at how I might do that.",
        "tokens": [
          51464,
          961,
          311,
          574,
          412,
          577,
          286,
          1062,
          360,
          300,
          13,
          51564
        ]
      },
      {
        "avg_logprob": -0.22524850086499287,
        "compression_ratio": 1.6414141414141414,
        "end": 574,
        "id": 70,
        "no_speech_prob": 0.02033173106610775,
        "seek": 54600,
        "start": 570,
        "temperature": 0,
        "text": " Okay, so I want to match a literal square bracket, right.",
        "tokens": [
          51564,
          1033,
          11,
          370,
          286,
          528,
          281,
          2995,
          257,
          20411,
          3732,
          16904,
          11,
          558,
          13,
          51764
        ]
      },
      {
        "avg_logprob": -0.20142765045166017,
        "compression_ratio": 1.75,
        "end": 578,
        "id": 71,
        "no_speech_prob": 0.0020829413551837206,
        "seek": 57400,
        "start": 574,
        "temperature": 0,
        "text": " Remember, square bracket is a meta character, so I want to match a literal square bracket.",
        "tokens": [
          50364,
          5459,
          11,
          3732,
          16904,
          307,
          257,
          19616,
          2517,
          11,
          370,
          286,
          528,
          281,
          2995,
          257,
          20411,
          3732,
          16904,
          13,
          50564
        ]
      },
      {
        "avg_logprob": -0.20142765045166017,
        "compression_ratio": 1.75,
        "end": 583,
        "id": 72,
        "no_speech_prob": 0.0020829413551837206,
        "seek": 57400,
        "start": 578,
        "temperature": 0,
        "text": " And then I'm going to do something a little bit goofy, ah, I forgot about something with quantifiers,",
        "tokens": [
          50564,
          400,
          550,
          286,
          478,
          516,
          281,
          360,
          746,
          257,
          707,
          857,
          42995,
          11,
          3716,
          11,
          286,
          5298,
          466,
          746,
          365,
          4426,
          23463,
          11,
          50814
        ]
      },
      {
        "avg_logprob": -0.20142765045166017,
        "compression_ratio": 1.75,
        "end": 590,
        "id": 73,
        "no_speech_prob": 0.0020829413551837206,
        "seek": 57400,
        "start": 583,
        "temperature": 0,
        "text": " which is now just, if you are still watching this somehow, however many hours into videos about regular expressions,",
        "tokens": [
          50814,
          597,
          307,
          586,
          445,
          11,
          498,
          291,
          366,
          920,
          1976,
          341,
          6063,
          11,
          4461,
          867,
          2496,
          666,
          2145,
          466,
          3890,
          15277,
          11,
          51164
        ]
      },
      {
        "avg_logprob": -0.20142765045166017,
        "compression_ratio": 1.75,
        "end": 592,
        "id": 74,
        "no_speech_prob": 0.0020829413551837206,
        "seek": 57400,
        "start": 590,
        "temperature": 0,
        "text": " I missed something important in the previous video.",
        "tokens": [
          51164,
          286,
          6721,
          746,
          1021,
          294,
          264,
          3894,
          960,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.20142765045166017,
        "compression_ratio": 1.75,
        "end": 600,
        "id": 75,
        "no_speech_prob": 0.0020829413551837206,
        "seek": 57400,
        "start": 592,
        "temperature": 0,
        "text": " I'm going to do dot star, very dangerous to say, I'm going to say I want to get a bracket followed by anything.",
        "tokens": [
          51264,
          286,
          478,
          516,
          281,
          360,
          5893,
          3543,
          11,
          588,
          5795,
          281,
          584,
          11,
          286,
          478,
          516,
          281,
          584,
          286,
          528,
          281,
          483,
          257,
          16904,
          6263,
          538,
          1340,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.20142765045166017,
        "compression_ratio": 1.75,
        "end": 601,
        "id": 76,
        "no_speech_prob": 0.0020829413551837206,
        "seek": 57400,
        "start": 600,
        "temperature": 0,
        "text": " What do I match?",
        "tokens": [
          51664,
          708,
          360,
          286,
          2995,
          30,
          51714
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 603,
        "id": 77,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 601,
        "temperature": 0,
        "text": " Look at this, bracket followed by anything.",
        "tokens": [
          50364,
          2053,
          412,
          341,
          11,
          16904,
          6263,
          538,
          1340,
          13,
          50464
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 605,
        "id": 78,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 603,
        "temperature": 0,
        "text": " Look, there's some brackets followed by anything.",
        "tokens": [
          50464,
          2053,
          11,
          456,
          311,
          512,
          26179,
          6263,
          538,
          1340,
          13,
          50564
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 606,
        "id": 79,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 605,
        "temperature": 0,
        "text": " Followed by what?",
        "tokens": [
          50564,
          9876,
          292,
          538,
          437,
          30,
          50614
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 608,
        "id": 80,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 606,
        "temperature": 0,
        "text": " A closed bracket.",
        "tokens": [
          50614,
          316,
          5395,
          16904,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 610,
        "id": 81,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 608,
        "temperature": 0,
        "text": " Look at this.",
        "tokens": [
          50714,
          2053,
          412,
          341,
          13,
          50814
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 612,
        "id": 82,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 610,
        "temperature": 0,
        "text": " Bracket followed by anything followed by a closed bracket.",
        "tokens": [
          50814,
          1603,
          501,
          302,
          6263,
          538,
          1340,
          6263,
          538,
          257,
          5395,
          16904,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 616,
        "id": 83,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 612,
        "temperature": 0,
        "text": " Now this actually worked, but let me just do something for you here.",
        "tokens": [
          50914,
          823,
          341,
          767,
          2732,
          11,
          457,
          718,
          385,
          445,
          360,
          746,
          337,
          291,
          510,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 619,
        "id": 84,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 616,
        "temperature": 0,
        "text": " Look what happened.",
        "tokens": [
          51114,
          2053,
          437,
          2011,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 628,
        "id": 85,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 619,
        "temperature": 0,
        "text": " It didn't match Google and test separately, because dot star is anything, like this closed bracket, like this space, like this parenthesis.",
        "tokens": [
          51264,
          467,
          994,
          380,
          2995,
          3329,
          293,
          1500,
          14759,
          11,
          570,
          5893,
          3543,
          307,
          1340,
          11,
          411,
          341,
          5395,
          16904,
          11,
          411,
          341,
          1901,
          11,
          411,
          341,
          23350,
          9374,
          13,
          51714
        ]
      },
      {
        "avg_logprob": -0.2130067210552121,
        "compression_ratio": 1.9956709956709957,
        "end": 630,
        "id": 86,
        "no_speech_prob": 0.04023701697587967,
        "seek": 60100,
        "start": 628,
        "temperature": 0,
        "text": " Remember, dot star is greedy.",
        "tokens": [
          51714,
          5459,
          11,
          5893,
          3543,
          307,
          28228,
          13,
          51814
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 636,
        "id": 87,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 630,
        "temperature": 0,
        "text": " I'm trying to match bracket followed by anything up until, just keep matching until you can no longer match,",
        "tokens": [
          50364,
          286,
          478,
          1382,
          281,
          2995,
          16904,
          6263,
          538,
          1340,
          493,
          1826,
          11,
          445,
          1066,
          14324,
          1826,
          291,
          393,
          572,
          2854,
          2995,
          11,
          50664
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 638,
        "id": 88,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 636,
        "temperature": 0,
        "text": " and then there's a closed bracket.",
        "tokens": [
          50664,
          293,
          550,
          456,
          311,
          257,
          5395,
          16904,
          13,
          50764
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 640,
        "id": 89,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 638,
        "temperature": 0,
        "text": " So this is what's known as a greedy modifier.",
        "tokens": [
          50764,
          407,
          341,
          307,
          437,
          311,
          2570,
          382,
          257,
          28228,
          38011,
          13,
          50864
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 643,
        "id": 90,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 640,
        "temperature": 0,
        "text": " Dot star is by default greedy.",
        "tokens": [
          50864,
          38753,
          3543,
          307,
          538,
          7576,
          28228,
          13,
          51014
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 645,
        "id": 91,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 643,
        "temperature": 0,
        "text": " It will continue to match.",
        "tokens": [
          51014,
          467,
          486,
          2354,
          281,
          2995,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 651,
        "id": 92,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 645,
        "temperature": 0,
        "text": " If I want to get Google and test as separate matches, I need to make that modifier not greedy.",
        "tokens": [
          51114,
          759,
          286,
          528,
          281,
          483,
          3329,
          293,
          1500,
          382,
          4994,
          10676,
          11,
          286,
          643,
          281,
          652,
          300,
          38011,
          406,
          28228,
          13,
          51414
        ]
      },
      {
        "avg_logprob": -0.1458227211069838,
        "compression_ratio": 1.7053941908713692,
        "end": 656,
        "id": 93,
        "no_speech_prob": 0.024422289803624153,
        "seek": 63000,
        "start": 651,
        "temperature": 0,
        "text": " Question mark is a way to change a quantifier to make it not greedy.",
        "tokens": [
          51414,
          14464,
          1491,
          307,
          257,
          636,
          281,
          1319,
          257,
          4426,
          9902,
          281,
          652,
          309,
          406,
          28228,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.19667193354392537,
        "compression_ratio": 1.6610878661087867,
        "end": 661,
        "id": 94,
        "no_speech_prob": 0.11436252295970917,
        "seek": 65600,
        "start": 656,
        "temperature": 0,
        "text": " Question mark means optional, but it also paired with a quantifier means not greedy.",
        "tokens": [
          50364,
          14464,
          1491,
          1355,
          17312,
          11,
          457,
          309,
          611,
          25699,
          365,
          257,
          4426,
          9902,
          1355,
          406,
          28228,
          13,
          50614
        ]
      },
      {
        "avg_logprob": -0.19667193354392537,
        "compression_ratio": 1.6610878661087867,
        "end": 669,
        "id": 95,
        "no_speech_prob": 0.11436252295970917,
        "seek": 65600,
        "start": 661,
        "temperature": 0,
        "text": " So if I put this question mark right in here, dot star question mark, it will no longer be greedy, and look what the difference.",
        "tokens": [
          50614,
          407,
          498,
          286,
          829,
          341,
          1168,
          1491,
          558,
          294,
          510,
          11,
          5893,
          3543,
          1168,
          1491,
          11,
          309,
          486,
          572,
          2854,
          312,
          28228,
          11,
          293,
          574,
          437,
          264,
          2649,
          13,
          51014
        ]
      },
      {
        "avg_logprob": -0.19667193354392537,
        "compression_ratio": 1.6610878661087867,
        "end": 671,
        "id": 96,
        "no_speech_prob": 0.11436252295970917,
        "seek": 65600,
        "start": 669,
        "temperature": 0,
        "text": " I've now matched Google and test separately.",
        "tokens": [
          51014,
          286,
          600,
          586,
          21447,
          3329,
          293,
          1500,
          14759,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.19667193354392537,
        "compression_ratio": 1.6610878661087867,
        "end": 679,
        "id": 97,
        "no_speech_prob": 0.11436252295970917,
        "seek": 65600,
        "start": 671,
        "temperature": 0,
        "text": " So that's kind of important, and just to keep testing this idea out, to make sure it's working, I am going to put those on separate lines.",
        "tokens": [
          51114,
          407,
          300,
          311,
          733,
          295,
          1021,
          11,
          293,
          445,
          281,
          1066,
          4997,
          341,
          1558,
          484,
          11,
          281,
          652,
          988,
          309,
          311,
          1364,
          11,
          286,
          669,
          516,
          281,
          829,
          729,
          322,
          4994,
          3876,
          13,
          51514
        ]
      },
      {
        "avg_logprob": -0.20795737572436063,
        "compression_ratio": 1.668122270742358,
        "end": 687,
        "id": 98,
        "no_speech_prob": 0.10969917476177216,
        "seek": 67900,
        "start": 680,
        "temperature": 0,
        "text": " Okay, so now I am going to match that, followed by a literal parenthesis, followed by HTTP,",
        "tokens": [
          50414,
          1033,
          11,
          370,
          586,
          286,
          669,
          516,
          281,
          2995,
          300,
          11,
          6263,
          538,
          257,
          20411,
          23350,
          9374,
          11,
          6263,
          538,
          33283,
          11,
          50764
        ]
      },
      {
        "avg_logprob": -0.20795737572436063,
        "compression_ratio": 1.668122270742358,
        "end": 692,
        "id": 99,
        "no_speech_prob": 0.10969917476177216,
        "seek": 67900,
        "start": 687,
        "temperature": 0,
        "text": " which followed by dot star not greedy, followed by another parenthesis.",
        "tokens": [
          50764,
          597,
          6263,
          538,
          5893,
          3543,
          406,
          28228,
          11,
          6263,
          538,
          1071,
          23350,
          9374,
          13,
          51014
        ]
      },
      {
        "avg_logprob": -0.20795737572436063,
        "compression_ratio": 1.668122270742358,
        "end": 697,
        "id": 100,
        "no_speech_prob": 0.10969917476177216,
        "seek": 67900,
        "start": 692,
        "temperature": 0,
        "text": " So you can see I have now matched any links written in Markdown.",
        "tokens": [
          51014,
          407,
          291,
          393,
          536,
          286,
          362,
          586,
          21447,
          604,
          6123,
          3720,
          294,
          3934,
          5093,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.20795737572436063,
        "compression_ratio": 1.668122270742358,
        "end": 704,
        "id": 101,
        "no_speech_prob": 0.10969917476177216,
        "seek": 67900,
        "start": 697,
        "temperature": 0,
        "text": " So this could be, this is Google, you know, and this is ITP, and also, right?",
        "tokens": [
          51264,
          407,
          341,
          727,
          312,
          11,
          341,
          307,
          3329,
          11,
          291,
          458,
          11,
          293,
          341,
          307,
          6783,
          47,
          11,
          293,
          611,
          11,
          558,
          30,
          51614
        ]
      },
      {
        "avg_logprob": -0.20795737572436063,
        "compression_ratio": 1.668122270742358,
        "end": 708,
        "id": 102,
        "no_speech_prob": 0.10969917476177216,
        "seek": 67900,
        "start": 704,
        "temperature": 0,
        "text": " So I have some text that has links in it, and I want to convert it to HTML.",
        "tokens": [
          51614,
          407,
          286,
          362,
          512,
          2487,
          300,
          575,
          6123,
          294,
          309,
          11,
          293,
          286,
          528,
          281,
          7620,
          309,
          281,
          17995,
          13,
          51814
        ]
      },
      {
        "avg_logprob": -0.21110928209522103,
        "compression_ratio": 1.6506024096385543,
        "end": 712,
        "id": 103,
        "no_speech_prob": 0.00359356845729053,
        "seek": 70800,
        "start": 708,
        "temperature": 0,
        "text": " So now I am going to replace it. First I need to capture, right?",
        "tokens": [
          50364,
          407,
          586,
          286,
          669,
          516,
          281,
          7406,
          309,
          13,
          2386,
          286,
          643,
          281,
          7983,
          11,
          558,
          30,
          50564
        ]
      },
      {
        "avg_logprob": -0.21110928209522103,
        "compression_ratio": 1.6506024096385543,
        "end": 718,
        "id": 104,
        "no_speech_prob": 0.00359356845729053,
        "seek": 70800,
        "start": 712,
        "temperature": 0,
        "text": " I need to capture the name, and I need to capture the URL.",
        "tokens": [
          50564,
          286,
          643,
          281,
          7983,
          264,
          1315,
          11,
          293,
          286,
          643,
          281,
          7983,
          264,
          12905,
          13,
          50864
        ]
      },
      {
        "avg_logprob": -0.21110928209522103,
        "compression_ratio": 1.6506024096385543,
        "end": 720,
        "id": 105,
        "no_speech_prob": 0.00359356845729053,
        "seek": 70800,
        "start": 718,
        "temperature": 0,
        "text": " So I am adding additional parenthesis.",
        "tokens": [
          50864,
          407,
          286,
          669,
          5127,
          4497,
          23350,
          9374,
          13,
          50964
        ]
      },
      {
        "avg_logprob": -0.21110928209522103,
        "compression_ratio": 1.6506024096385543,
        "end": 722,
        "id": 106,
        "no_speech_prob": 0.00359356845729053,
        "seek": 70800,
        "start": 720,
        "temperature": 0,
        "text": " Look how crazy and cryptic this is getting.",
        "tokens": [
          50964,
          2053,
          577,
          3219,
          293,
          9844,
          299,
          341,
          307,
          1242,
          13,
          51064
        ]
      },
      {
        "avg_logprob": -0.21110928209522103,
        "compression_ratio": 1.6506024096385543,
        "end": 726,
        "id": 107,
        "no_speech_prob": 0.00359356845729053,
        "seek": 70800,
        "start": 722,
        "temperature": 0,
        "text": " But I am capturing the name as group one, and the URL as group two.",
        "tokens": [
          51064,
          583,
          286,
          669,
          23384,
          264,
          1315,
          382,
          1594,
          472,
          11,
          293,
          264,
          12905,
          382,
          1594,
          732,
          13,
          51264
        ]
      },
      {
        "avg_logprob": -0.24453663569624706,
        "compression_ratio": 1.5592417061611374,
        "end": 739,
        "id": 108,
        "no_speech_prob": 0.18241740763187408,
        "seek": 72600,
        "start": 726,
        "temperature": 0,
        "text": " So now I want to say, replace it with a href equals group two, oh, quote group two, followed by group one, that close tag.",
        "tokens": [
          50364,
          407,
          586,
          286,
          528,
          281,
          584,
          11,
          7406,
          309,
          365,
          257,
          276,
          33115,
          6915,
          1594,
          732,
          11,
          1954,
          11,
          6513,
          1594,
          732,
          11,
          6263,
          538,
          1594,
          472,
          11,
          300,
          1998,
          6162,
          13,
          51014
        ]
      },
      {
        "avg_logprob": -0.24453663569624706,
        "compression_ratio": 1.5592417061611374,
        "end": 748,
        "id": 109,
        "no_speech_prob": 0.18241740763187408,
        "seek": 72600,
        "start": 739,
        "temperature": 0,
        "text": " So this is saying take the Markdown syntax, capture the name, the title, and the URL, and then replace it with the HTML formatting.",
        "tokens": [
          51014,
          407,
          341,
          307,
          1566,
          747,
          264,
          3934,
          5093,
          28431,
          11,
          7983,
          264,
          1315,
          11,
          264,
          4876,
          11,
          293,
          264,
          12905,
          11,
          293,
          550,
          7406,
          309,
          365,
          264,
          17995,
          39366,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.24453663569624706,
        "compression_ratio": 1.5592417061611374,
        "end": 752,
        "id": 110,
        "no_speech_prob": 0.18241740763187408,
        "seek": 72600,
        "start": 748,
        "temperature": 0,
        "text": " And let's look at this, and I am going to do find, replace.",
        "tokens": [
          51464,
          400,
          718,
          311,
          574,
          412,
          341,
          11,
          293,
          286,
          669,
          516,
          281,
          360,
          915,
          11,
          7406,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.24453663569624706,
        "compression_ratio": 1.5592417061611374,
        "end": 754,
        "id": 111,
        "no_speech_prob": 0.18241740763187408,
        "seek": 72600,
        "start": 752,
        "temperature": 0,
        "text": " Did that work?",
        "tokens": [
          51664,
          2589,
          300,
          589,
          30,
          51764
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 757,
        "id": 112,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 755,
        "temperature": 0,
        "text": " Oh, what's not working here?",
        "tokens": [
          50414,
          876,
          11,
          437,
          311,
          406,
          1364,
          510,
          30,
          50514
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 759,
        "id": 113,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 757,
        "temperature": 0,
        "text": " Find, oh, what did I miss?",
        "tokens": [
          50514,
          11809,
          11,
          1954,
          11,
          437,
          630,
          286,
          1713,
          30,
          50614
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 761,
        "id": 114,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 759,
        "temperature": 0,
        "text": " Bug here.",
        "tokens": [
          50614,
          23821,
          510,
          13,
          50714
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 763,
        "id": 115,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 761,
        "temperature": 0,
        "text": " No results found.",
        "tokens": [
          50714,
          883,
          3542,
          1352,
          13,
          50814
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 765,
        "id": 116,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 763,
        "temperature": 0,
        "text": " Okay, I messed something up.",
        "tokens": [
          50814,
          1033,
          11,
          286,
          16507,
          746,
          493,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 771,
        "id": 117,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 765,
        "temperature": 0,
        "text": " Oh, that should not have a backslash there.",
        "tokens": [
          50914,
          876,
          11,
          300,
          820,
          406,
          362,
          257,
          646,
          10418,
          1299,
          456,
          13,
          51214
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 774,
        "id": 118,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 771,
        "temperature": 0,
        "text": " Sorry, a backslash got typed in there.",
        "tokens": [
          51214,
          4919,
          11,
          257,
          646,
          10418,
          1299,
          658,
          33941,
          294,
          456,
          13,
          51364
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 776,
        "id": 119,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 774,
        "temperature": 0,
        "text": " I am just going to show this to you again.",
        "tokens": [
          51364,
          286,
          669,
          445,
          516,
          281,
          855,
          341,
          281,
          291,
          797,
          13,
          51464
        ]
      },
      {
        "avg_logprob": -0.23100680571336013,
        "compression_ratio": 1.5471698113207548,
        "end": 780,
        "id": 120,
        "no_speech_prob": 0.007577072829008102,
        "seek": 75400,
        "start": 776,
        "temperature": 0,
        "text": " This is, I got to document these regular expressions somewhere, like a gist or something.",
        "tokens": [
          51464,
          639,
          307,
          11,
          286,
          658,
          281,
          4166,
          613,
          3890,
          15277,
          4079,
          11,
          411,
          257,
          290,
          468,
          420,
          746,
          13,
          51664
        ]
      },
      {
        "avg_logprob": -0.20420864423116047,
        "compression_ratio": 1.8211678832116789,
        "end": 788,
        "id": 121,
        "no_speech_prob": 0.10374472290277481,
        "seek": 78000,
        "start": 780,
        "temperature": 0,
        "text": " This is that regular expression, and now I am going to say replace, there we go, replace, replace.",
        "tokens": [
          50364,
          639,
          307,
          300,
          3890,
          6114,
          11,
          293,
          586,
          286,
          669,
          516,
          281,
          584,
          7406,
          11,
          456,
          321,
          352,
          11,
          7406,
          11,
          7406,
          13,
          50764
        ]
      },
      {
        "avg_logprob": -0.20420864423116047,
        "compression_ratio": 1.8211678832116789,
        "end": 791,
        "id": 122,
        "no_speech_prob": 0.10374472290277481,
        "seek": 78000,
        "start": 788,
        "temperature": 0,
        "text": " And you can see, now I have taken each of those and replaced it.",
        "tokens": [
          50764,
          400,
          291,
          393,
          536,
          11,
          586,
          286,
          362,
          2726,
          1184,
          295,
          729,
          293,
          10772,
          309,
          13,
          50914
        ]
      },
      {
        "avg_logprob": -0.20420864423116047,
        "compression_ratio": 1.8211678832116789,
        "end": 795,
        "id": 123,
        "no_speech_prob": 0.10374472290277481,
        "seek": 78000,
        "start": 791,
        "temperature": 0,
        "text": " And if I had a document that was thousands of pages long, I can instantly do all of them.",
        "tokens": [
          50914,
          400,
          498,
          286,
          632,
          257,
          4166,
          300,
          390,
          5383,
          295,
          7183,
          938,
          11,
          286,
          393,
          13518,
          360,
          439,
          295,
          552,
          13,
          51114
        ]
      },
      {
        "avg_logprob": -0.20420864423116047,
        "compression_ratio": 1.8211678832116789,
        "end": 805,
        "id": 124,
        "no_speech_prob": 0.10374472290277481,
        "seek": 78000,
        "start": 795,
        "temperature": 0,
        "text": " There is one more piece related to capturing groups that I want to show you, beyond just referencing the group in a find and replace operation.",
        "tokens": [
          51114,
          821,
          307,
          472,
          544,
          2522,
          4077,
          281,
          23384,
          3935,
          300,
          286,
          528,
          281,
          855,
          291,
          11,
          4399,
          445,
          40582,
          264,
          1594,
          294,
          257,
          915,
          293,
          7406,
          6916,
          13,
          51614
        ]
      },
      {
        "avg_logprob": -0.20420864423116047,
        "compression_ratio": 1.8211678832116789,
        "end": 809,
        "id": 125,
        "no_speech_prob": 0.10374472290277481,
        "seek": 78000,
        "start": 805,
        "temperature": 0,
        "text": " And this is referencing a group in the regular expression itself, and that's called a back reference.",
        "tokens": [
          51614,
          400,
          341,
          307,
          40582,
          257,
          1594,
          294,
          264,
          3890,
          6114,
          2564,
          11,
          293,
          300,
          311,
          1219,
          257,
          646,
          6408,
          13,
          51814
        ]
      },
      {
        "avg_logprob": -0.2503479077265813,
        "compression_ratio": 0.9622641509433962,
        "end": 811,
        "id": 126,
        "no_speech_prob": 0.008984792977571487,
        "seek": 80900,
        "start": 809,
        "temperature": 0,
        "text": " And I'll show you that in the next video.",
        "tokens": [
          50364,
          400,
          286,
          603,
          855,
          291,
          300,
          294,
          264,
          958,
          960,
          13,
          50464
        ]
      },
      {
        "avg_logprob": -0.2503479077265813,
        "compression_ratio": 0.9622641509433962,
        "end": 821,
        "id": 127,
        "no_speech_prob": 0.008984792977571487,
        "seek": 80900,
        "start": 811,
        "temperature": 0,
        "text": " ♪♪♪",
        "tokens": [
          50464,
          220,
          158,
          247,
          103,
          158,
          247,
          103,
          158,
          247,
          103,
          50964
        ]
      }
    ],
    "transcription": " Hello, welcome to another regular expression video. Can you believe it? Here we are again, again talking about regular expressions. I can't believe it. This is my life, isn't it? Anyway. Okay, so in this video I want to talk about something called capturing groups and back references. Kind of ominous, weird sounding, but they're very powerful, very interesting and you can use them. This is really where you start to get into exciting stuff you can do for experimental, strange regular expression poetry stuff. Okay, so what do I mean by capturing groups? So let's say, let's go back to the phone number example. So let's say I have these two phone numbers, 212.555.1234 and I have 917 and I'm just going to use the dash here for a second, dash 867-5309. So let's say ultimately what I want to do is I want to redact these numbers. So I want to still see the area codes, but I want to do a search and replace any phone number and I want them to come out like this. So what I need to first do as we know is match these phone numbers and the way that I can match these phone numbers, we've done this a bunch of times but I'll write it over here. D, three digits followed by a dash, followed by three digits, followed by a dash, followed by four digits. Okay, so here's the thing. Whenever you do a regular expression search, it matches a particular, it doesn't match, right? This is the whole thing that is matched. And I'm going to erase the second one just to give myself some more room here. And then what it automatically does is it assigns this full match to something called group number zero. So I have captured this match from my regular expression and I've called it group number zero. If I put parentheses, so parentheses can be used for alternation doing an or, but parentheses whether or not they're used for alternation or not also will capture a subgroup. So in other words, what if I put an open parentheses here and obviously I'm making this very extreme and a close parentheses here. What that means is this part of the full match should be captured separately or additionally as a different group. And this now is group number one. And what if I do this? Over here, this group now is group number two. And I'm running out of room here. Group two. So behind the scenes, the regular expression has done this match and stored in the computer's memory three separate strings. The full match is group zero. The first, you know, from left to right, the first submatch captured parentheses as group one. The second submatch captured parentheses as group two. I don't know why I put dot, those are dotted lines. Those are full parentheses. So this is very powerful. Why? Because what I can do is in different ways I can refer to those groups whenever I want to. And there's two ways of referring to those groups. For example, dollar sign one refers to group number one, but also backslash one can refer to group number one. And these are being used in different places. So the dollar sign is used whenever you're doing a replace and you want to refer to a captured group. And backslash one is when you're doing a, when you're within the regular expression itself referring to a captured group. So I'm now going to show you two scenarios where each of these is used. Okay? So hopefully this makes some sense to you, but it'll make more sense once I actually play it out here. So the first scenario is, let's again, apologize for this, let's again write the regular expression to match all three of these phone numbers. And if you recall, actually I can probably scroll up and find it, never mind. I can say I want to have what? An optional open parentheses followed by three digits, followed by a dot, a dash, or a closed parentheses. Followed by, whoops, what did I miss here? Range out of order. Oh, the dash has to be first when the character is last. Followed by three digits, followed by again a dot, a dash or a dot, dash has to be first. And then followed by four digits. So now, I have now matched all four of these groups. So let's say what I want to do is keep only the first number, and then I want to redact the second, only the first three numbers, the area code so to speak, and I want to redact the rest of the phone number. So the way I would do this is let me capture only the area code. So this, by the way, this, these three numbers right there, that's the area code. So what I can actually do is put parentheses around it. And now what I want to do when I do my replace, right, this is the replace, is I want to say, hey, let me replace it with whatever was captured in group one, followed by dash xxx, followed by dash xxx. Now, I'm going to, right, so this is saying like use the thing that I captured in the replace. So let me show you this, and now I'm going to do, I'm going to do a replace, right, replace, look what happened there, replace, look what happened there, replace. Now I lost the original formatting of the regular expression because remember these are a lot of, I don't know why it's, what format it thinks I am. But remember I'm not, I could, now this could be an exercise, I'm not going to go through this right now because I'll go on for too long. But an exercise you could try to try is can you capture the rest of the formatting of the phone number and then have multiple groups. So it still retains, right, it's, right now I'm not retaining it, all the phone numbers now have this format, but if I undo, right, I want to keep the, I want to keep the dots or the dashes and the parentheses. Try to rewrite the regular expression to do that, very interesting exercise to try to do. Okay, let me think of a slightly different scenario, I'll show you this can also be useful, this has happened to me before. I'll show you, let's say I wanted to find and replace, actually I have a first name comma last, list of first names comma last name. I can't think of any other names. Okay, so you can see I have a bunch of names, first name comma last name, oh sorry, last name comma first name and I want to redo this list to just make this list first name comma last name. It's like I have thousands of these, I want to use a regular expression, I don't want to have to sit here and be like cut, paste, space, delete, right. I could do that for every single line or I could try to make some kind of weird macro that does it automatically, I could do this with a regular expression. So I'm going to go down and I'm going to try to write a regular expression. What am I trying to match? I'm trying to match any word character, any optionally, any number of word characters followed by a number, followed by one or more whitespace, not followed, sorry, followed by a comma, followed by one or more whitespace, followed by any number of word characters. So I matched these, that looks pretty good. Now I want to capture the first name and the last name, or the last name and the first name. So this is the, oops, ah, oh I lost it. Shoot, this will get edited out, let me write that again. Comma, some amount of whitespace, that, okay. So I want to capture that last name, right, any sequence of word characters and I want to capture that first name. So now I've captured those and I want to replace, right, I want to first see the first name, space, the last name. So this, oh, sorry, two comma one, remember group zero is everything. So group two is the second group, right, the first name which is last name comma first name. I want to show that and then the other one, wah, I'm really, I don't know if I'm making any sense here. Okay, now I'm going to do replace all, boom, I did it. So this is the kind of thing that you can really use regular expressions for in kind of find and replace. Here's another scenario, I don't know how many of these scenarios are worth going through, but, ah, you know, matching links, like this is markdown, ah, right, I'm going to just do this really quick, I'm going to do one more. What if I want to match, and I guess assuming my syntax is markdown, what if I want to match any link written in this markdown syntax and translate it to HTML. Let's look at how I might do that. Okay, so I want to match a literal square bracket, right. Remember, square bracket is a meta character, so I want to match a literal square bracket. And then I'm going to do something a little bit goofy, ah, I forgot about something with quantifiers, which is now just, if you are still watching this somehow, however many hours into videos about regular expressions, I missed something important in the previous video. I'm going to do dot star, very dangerous to say, I'm going to say I want to get a bracket followed by anything. What do I match? Look at this, bracket followed by anything. Look, there's some brackets followed by anything. Followed by what? A closed bracket. Look at this. Bracket followed by anything followed by a closed bracket. Now this actually worked, but let me just do something for you here. Look what happened. It didn't match Google and test separately, because dot star is anything, like this closed bracket, like this space, like this parenthesis. Remember, dot star is greedy. I'm trying to match bracket followed by anything up until, just keep matching until you can no longer match, and then there's a closed bracket. So this is what's known as a greedy modifier. Dot star is by default greedy. It will continue to match. If I want to get Google and test as separate matches, I need to make that modifier not greedy. Question mark is a way to change a quantifier to make it not greedy. Question mark means optional, but it also paired with a quantifier means not greedy. So if I put this question mark right in here, dot star question mark, it will no longer be greedy, and look what the difference. I've now matched Google and test separately. So that's kind of important, and just to keep testing this idea out, to make sure it's working, I am going to put those on separate lines. Okay, so now I am going to match that, followed by a literal parenthesis, followed by HTTP, which followed by dot star not greedy, followed by another parenthesis. So you can see I have now matched any links written in Markdown. So this could be, this is Google, you know, and this is ITP, and also, right? So I have some text that has links in it, and I want to convert it to HTML. So now I am going to replace it. First I need to capture, right? I need to capture the name, and I need to capture the URL. So I am adding additional parenthesis. Look how crazy and cryptic this is getting. But I am capturing the name as group one, and the URL as group two. So now I want to say, replace it with a href equals group two, oh, quote group two, followed by group one, that close tag. So this is saying take the Markdown syntax, capture the name, the title, and the URL, and then replace it with the HTML formatting. And let's look at this, and I am going to do find, replace. Did that work? Oh, what's not working here? Find, oh, what did I miss? Bug here. No results found. Okay, I messed something up. Oh, that should not have a backslash there. Sorry, a backslash got typed in there. I am just going to show this to you again. This is, I got to document these regular expressions somewhere, like a gist or something. This is that regular expression, and now I am going to say replace, there we go, replace, replace. And you can see, now I have taken each of those and replaced it. And if I had a document that was thousands of pages long, I can instantly do all of them. There is one more piece related to capturing groups that I want to show you, beyond just referencing the group in a find and replace operation. And this is referencing a group in the regular expression itself, and that's called a back reference. And I'll show you that in the next video. ♪♪♪",
    "translation": null
  },
  "error": null,
  "status": "succeeded",
  "created_at": "2023-09-26T21:49:16.961151Z",
  "started_at": "2023-09-26T21:49:16.975195Z",
  "completed_at": "2023-09-26T21:52:45.891934Z",
  "webhook": "https://83ceaa0b612c.ngrok.app/?video_id=c9HbsUSWilw",
  "webhook_events_filter": [
    "completed"
  ],
  "metrics": {
    "predict_time": 208.916739
  },
  "urls": {
    "cancel": "https://api.replicate.com/v1/predictions/h3cy4kzbbzxqfwjepvgfho6ici/cancel",
    "get": "https://api.replicate.com/v1/predictions/h3cy4kzbbzxqfwjepvgfho6ici"
  }
}